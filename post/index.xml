<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Sharing knowledge</title><link>https://uthark.github.io/post/</link><description>Recent content in Posts on Sharing knowledge</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 06 Oct 2021 21:36:07 -0700</lastBuildDate><atom:link href="https://uthark.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Running Pi-hole on Kubernetes</title><link>https://uthark.github.io/post/2021-10-06-running-pihole-kubernetes/</link><pubDate>Wed, 06 Oct 2021 21:36:07 -0700</pubDate><guid>https://uthark.github.io/post/2021-10-06-running-pihole-kubernetes/</guid><description>Recently I wrote how you can install Kubernetes on Raspberry Pi.
In this post we will install Pi-Hole on Kubernetes.
Up to recent versions of Pi-Hole Docker images you had to take care of the correct architecture (and as a result correct docker tag to use).</description></item><item><title>Performing Kubernetes Service CIDR Block Migration</title><link>https://uthark.github.io/post/2021-01-13-service-cidr-block-migration/</link><pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate><guid>https://uthark.github.io/post/2021-01-13-service-cidr-block-migration/</guid><description>&lt;p>In the post I describe how we did migration of Service CIDR Blocks in the fleet of our kubernetes clusters in production without downtime.&lt;/p></description></item><item><title>iOS shortcuts</title><link>https://uthark.github.io/post/2021-01-10-ios-shortcuts/</link><pubDate>Sun, 10 Jan 2021 00:00:00 +0000</pubDate><guid>https://uthark.github.io/post/2021-01-10-ios-shortcuts/</guid><description>&lt;p>Recently I re-discovered &lt;a href="https://apps.apple.com/us/app/shortcuts/id1462947752">iOS Shortcuts&lt;/a> and found it is substantially useful. In this post I’ll describe few shortcuts I use.&lt;/p></description></item><item><title>Quick Entry Task to Omnifocus from Terminal</title><link>https://uthark.github.io/post/2020-10-05-omnifocus-cli-quickentry/</link><pubDate>Mon, 05 Oct 2020 22:07:21 -0700</pubDate><guid>https://uthark.github.io/post/2020-10-05-omnifocus-cli-quickentry/</guid><description>&lt;p>I use OmniFocus a lot and wanted to share with you simple automation that
will allow to add tasks to OmniFocus without switching to the main window or
using QuickEntry.&lt;/p></description></item><item><title>Causes of UnexpectedAdmissionError in Kubernetes</title><link>https://uthark.github.io/post/2020-09-30-unexpected-admission-error/</link><pubDate>Thu, 01 Oct 2020 00:00:29 -0700</pubDate><guid>https://uthark.github.io/post/2020-09-30-unexpected-admission-error/</guid><description>&lt;p>Recently I found that sometimes kubernetes pods are not starting. They were failing
with enigmatic &lt;code>UnexpectedAdmissionError&lt;/code>. Time to deep dive into what may cause it.&lt;/p>
&lt;p>After searching through the &lt;a href="https://github.com/kubernetes/kubernetes">kubernetes codebase&lt;/a>
I found several places where this status was set.&lt;/p></description></item><item><title>Deploying in Kubernetes. Checklist.</title><link>https://uthark.github.io/post/2020-09-04-deploy-project-kubernetes-checklist/</link><pubDate>Fri, 04 Sep 2020 15:08:37 -0700</pubDate><guid>https://uthark.github.io/post/2020-09-04-deploy-project-kubernetes-checklist/</guid><description>&lt;p>While kubernetes is easy to start with, it is quite challenging to master and
know all details. In this post I will provide checklist of important manifest
stanzas that are applicable to most applications that are targeted to run in
production and which are expected to not have downtime during cluster
maintenance and/or application updates.&lt;/p></description></item><item><title>Docker Best Practices</title><link>https://uthark.github.io/post/2020-09-03-docker-best-practices/</link><pubDate>Thu, 03 Sep 2020 22:05:41 -0700</pubDate><guid>https://uthark.github.io/post/2020-09-03-docker-best-practices/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>After using docker for last several years I’d like to share best practices that works in production.&lt;/p></description></item><item><title>Installing Kubernetes on Raspberry Pi</title><link>https://uthark.github.io/post/2020-09-02-installing-kubernetes-raspberrypi/</link><pubDate>Wed, 02 Sep 2020 20:44:30 -0700</pubDate><guid>https://uthark.github.io/post/2020-09-02-installing-kubernetes-raspberrypi/</guid><description>Installing kubernetes on Raspberry Pi is easy, but there are few caveats that you need to be aware of.
arm64 is preferred, because 64-bit allows you to use &amp;gt; 4GB of RAM per process.
Enable cgroups Kubernetes relies on cgroups for enforcing limits for the containers, so kernel needs to be booted with cgroups support.</description></item><item><title>Configuring Wi-Fi on Ubuntu Server 64-bit on Raspberry Pi 4</title><link>https://uthark.github.io/post/2020-09-01-raspberry-pi-ubuntu-arm64/</link><pubDate>Wed, 02 Sep 2020 09:19:21 -0700</pubDate><guid>https://uthark.github.io/post/2020-09-01-raspberry-pi-ubuntu-arm64/</guid><description>After discovering that by default Raspberry installs 32-bit Raspbian OS, I wanted to reinstall it with a 64 bit - this would allow to run Kubernetes on Raspberry
Decided to go with Ubuntu Server 64.
Installed it on SD Card with Raspberry Pi Imager.</description></item><item><title>Running Pi-Hole on Raspberry Pi</title><link>https://uthark.github.io/post/2020-08-31-pihole/</link><pubDate>Mon, 31 Aug 2020 22:55:25 -0700</pubDate><guid>https://uthark.github.io/post/2020-08-31-pihole/</guid><description>Several years ago I bought Raspberry Pi 3. It was a nice toy, but it was very slow and almost impossible to use, so it didn&amp;rsquo;t stick. Recently I bought new Raspberry Pi 4 because it has much better hardware (especially 8GB RAM option).</description></item><item><title>My Setup</title><link>https://uthark.github.io/post/2018-02-24-used-stuff/</link><pubDate>Sat, 24 Feb 2018 11:46:41 -0500</pubDate><guid>https://uthark.github.io/post/2018-02-24-used-stuff/</guid><description>Introduction This is a dump of different things and apps I use on a daily basis. Hope you will find it useful.
Shell/Terminal Applications zsh — ZSH is a shell. It is very good alternative to bash which is used by default in most Linux distributions and in macOS.</description></item><item><title>How to add YAML support to go-restful</title><link>https://uthark.github.io/post/2018-01-22-go-restful-yaml/</link><pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate><guid>https://uthark.github.io/post/2018-01-22-go-restful-yaml/</guid><description>go-restful is a go package used for building REST-style web services. It is very powerful, but it supports JSON and XML out of the box only. Fortunately, go-restful allows to register custom serialization schemes.
To do so, it provides a handy interface EntityReaderWriter, which contains only two methods:</description></item><item><title>Migration to hugo completed</title><link>https://uthark.github.io/2017/11/21/migrate-to-hugo/</link><pubDate>Tue, 21 Nov 2017 00:00:00 +0000</pubDate><guid>https://uthark.github.io/2017/11/21/migrate-to-hugo/</guid><description>Good news, everyone. Migration from octopress to hugo was completed. If you find any broken layout and/or links, please contact me.</description></item><item><title>Pocket is down</title><link>https://uthark.github.io/2014/04/23/pocket-is-down/</link><pubDate>Wed, 23 Apr 2014 12:09:10 +0000</pubDate><guid>https://uthark.github.io/2014/04/23/pocket-is-down/</guid><description>Hi. Pocket is down so it means there is no reading list for today. Everyone have a nice day.</description></item><item><title>Using Unitils ReflectionAssert</title><link>https://uthark.github.io/2014/04/16/using-unitils-reflectionassert/</link><pubDate>Wed, 16 Apr 2014 00:10:10 +0000</pubDate><guid>https://uthark.github.io/2014/04/16/using-unitils-reflectionassert/</guid><description>Often it is needed to compare two different instances of the class inside test. I.e. we save object into database, then fetch it back from db and we want to be sure if nothing was lost during saving/reading.
In order to make such assertions more easier and maintainable one can use great Unitils library which has useful class ReflectionAssert</description></item><item><title>Using AssertJ</title><link>https://uthark.github.io/2014/04/15/using-assertj/</link><pubDate>Tue, 15 Apr 2014 23:37:49 +0000</pubDate><guid>https://uthark.github.io/2014/04/15/using-assertj/</guid><description>AssertJ is a library which provides fluent strongly-typed assertions to use in unit tests.
Example of assertions written with AssertJ:
import io.github.uthark.blog.assertj.Assertions.assertThat; // ... within @Test User result = userDao.findByLogin(&amp;#34;username&amp;#34;); assertThat(result). isNotNull(). isActive(). hasLogin(&amp;#34;username&amp;#34;); As you can see assertions look much more readable.</description></item><item><title>Initializing Mockito @Mocks with JUnit @Rule</title><link>https://uthark.github.io/2014/03/28/initializing-at-mocks-with-junit-at-rule/</link><pubDate>Fri, 28 Mar 2014 13:24:45 +0000</pubDate><guid>https://uthark.github.io/2014/03/28/initializing-at-mocks-with-junit-at-rule/</guid><description>In this post I will show how one can implement custom JUnit @Rule.
As an example let&amp;rsquo;s take Mockito and implement custom rule which will initialize Mocks in test class.
By default, Mockito provides the following methods of mock initialization:</description></item><item><title>Atom.io invites</title><link>https://uthark.github.io/2014/03/28/atom-dot-io-invites/</link><pubDate>Fri, 28 Mar 2014 09:53:03 +0000</pubDate><guid>https://uthark.github.io/2014/03/28/atom-dot-io-invites/</guid><description>If anyone needs invites to atom.io, text editor from github - ask me in comments. I do have 3 invites to share.</description></item><item><title>Scala for the Intrigued</title><link>https://uthark.github.io/2014/03/25/scala-for-the-intrigued/</link><pubDate>Tue, 25 Mar 2014 16:09:42 +0000</pubDate><guid>https://uthark.github.io/2014/03/25/scala-for-the-intrigued/</guid><description>This is a very nice series of posts about Scala by Venkat Subramaniam
The Elegance of Scala Sensible Typing and Optional Items Cute Classes and Pure OO Functional Style of Programming Working with Collections Creating Higher Order Functions Pattern Matching XML as First Class Citizen Recursions and Tail Call Optimization Using Traits Chaining Traits Concurrency in Scala</description></item><item><title>Life fee</title><link>https://uthark.github.io/2014/03/14/life-fee/</link><pubDate>Fri, 14 Mar 2014 23:42:10 +0000</pubDate><guid>https://uthark.github.io/2014/03/14/life-fee/</guid><description>Found in sources:
try { // do some business logic. } catch (Exception e) { errorBean.addError(&amp;#34;System exception. Unable to locate life fee.&amp;#34;); } This is just awesome!</description></item><item><title>Limiting threads count for GreenRobot EventBus</title><link>https://uthark.github.io/2014/03/06/limiting-threads-count-for-greenrobot-eventbus/</link><pubDate>Thu, 06 Mar 2014 22:38:54 +0000</pubDate><guid>https://uthark.github.io/2014/03/06/limiting-threads-count-for-greenrobot-eventbus/</guid><description>In one of my projects I used EventBus library. The library is pretty cool and I would recommend everybody to use it.
But I found one small issue with this library - in case you send too many events very fast (i.</description></item><item><title>Using custom font in Android TextView</title><link>https://uthark.github.io/2014/03/06/customizing-font-in-android-textview/</link><pubDate>Thu, 06 Mar 2014 19:13:17 +0000</pubDate><guid>https://uthark.github.io/2014/03/06/customizing-font-in-android-textview/</guid><description>Today I want to share with you custom TextView which allows to set font to be used in xml layout.
First, we need to declare our custom styleable
attrs.xml:
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;resources&amp;gt; &amp;lt;declare-styleable name=&amp;#34;TypefaceTextView&amp;#34;&amp;gt; &amp;lt;attr name=&amp;#34;typeface&amp;#34; format=&amp;#34;string&amp;#34;/&amp;gt; &amp;lt;/declare-styleable&amp;gt; &amp;lt;/resources&amp;gt; Then we need to create subclass of TextView which will use custom attribute.</description></item><item><title>Solving issue with DB2 on VMWare Fusion on MacBook Pro 2013 Late</title><link>https://uthark.github.io/2014/03/05/solving-issue-with-db2-on-vmware-fusion-on-macbook-pro-2013-late/</link><pubDate>Wed, 05 Mar 2014 14:41:54 +0000</pubDate><guid>https://uthark.github.io/2014/03/05/solving-issue-with-db2-on-vmware-fusion-on-macbook-pro-2013-late/</guid><description>Today I found issue running DB2 10.1 under VMWare Fusion 6.0.2 on my MacBook - all management services for db2 are starting except for the db2 instance itself.
When I tried to start DB2 using db2start it just crashed without any additional information.</description></item><item><title>Snowboarding</title><link>https://uthark.github.io/2014/03/04/snowboarding/</link><pubDate>Tue, 04 Mar 2014 01:04:55 +0000</pubDate><guid>https://uthark.github.io/2014/03/04/snowboarding/</guid><description>Today in the evening I got to Whitetail Ski Resort.</description></item><item><title>Fixing unescaped quotes in page rendering in Octopress</title><link>https://uthark.github.io/2014/03/02/octopress-quote-fix/</link><pubDate>Sun, 02 Mar 2014 00:00:00 +0000</pubDate><guid>https://uthark.github.io/2014/03/02/octopress-quote-fix/</guid><description>When I created About Me page I found issue with rendering: for some reason styles and some javascripts were missing on the page.
Investigation showed that content in meta tag description contained unquoted quotes, thus resulting in broken HTML.
After searching within octopress sources I found the issue:</description></item><item><title>Lyne Game</title><link>https://uthark.github.io/2014/03/02/lyne-game/</link><pubDate>Sun, 02 Mar 2014 00:00:00 +0000</pubDate><guid>https://uthark.github.io/2014/03/02/lyne-game/</guid><description>Found very addictive and cool game: Lyne.
The goal of the game is to connect all dots on the playboard. Worth every cent.</description></item><item><title>PhotoStream #1. Sunset</title><link>https://uthark.github.io/2014/03/02/sunset/</link><pubDate>Sun, 02 Mar 2014 00:00:00 +0000</pubDate><guid>https://uthark.github.io/2014/03/02/sunset/</guid><description>Sunset on M St.</description></item><item><title>Using iTerm triggers</title><link>https://uthark.github.io/2014/03/02/iterm-triggers/</link><pubDate>Sun, 02 Mar 2014 00:00:00 +0000</pubDate><guid>https://uthark.github.io/2014/03/02/iterm-triggers/</guid><description>I want to share one of the cool features which iTerm.app has - triggers. The idea behind triggers is simple - it allows to perform arbitrary action based on the output in console window. For example, it can colorize specified content (based on regular expressions).</description></item><item><title>Сплин - Резонанс, часть 1.</title><link>https://uthark.github.io/2014/03/02/splean-resonance/</link><pubDate>Sun, 02 Mar 2014 00:00:00 +0000</pubDate><guid>https://uthark.github.io/2014/03/02/splean-resonance/</guid><description>Splean released new album - Resonance, part 1.
Good album, good texts.
You can listen previews here or here (Russia only).</description></item><item><title>Automatic query modification with Spring Data Mongo</title><link>https://uthark.github.io/2014/03/01/restricting-mongo-template/</link><pubDate>Sat, 01 Mar 2014 00:00:00 +0000</pubDate><guid>https://uthark.github.io/2014/03/01/restricting-mongo-template/</guid><description>Introduction Today I want to show how one can automatically apply additional restrictions on MongoDB Queries with MongoTemplate or Spring Data Mongo.
Implementation First, let&amp;rsquo;s introduce interface QueryModifier.
import org.springframework.data.mongodb.core.query.Query; public interface QueryModifier { /** * Modifies source query according to the rules.</description></item><item><title>Fixed Google+ comments on the site</title><link>https://uthark.github.io/2014/03/01/google-plus-comments-fixed/</link><pubDate>Sat, 01 Mar 2014 00:00:00 +0000</pubDate><guid>https://uthark.github.io/2014/03/01/google-plus-comments-fixed/</guid><description>Fixed google+ comments disappearing on the site.
Thanks to [this blog post][codeinf] [codeinf]: http://blog.code-infection.com/2013/04/google-comments-on-your-none-blogger.html</description></item><item><title>Пишем @Enable*-аннотацию для Spring</title><link>https://uthark.github.io/2013/06/29/spring-enable-annotation/</link><pubDate>Sat, 29 Jun 2013 00:00:00 +0000</pubDate><guid>https://uthark.github.io/2013/06/29/spring-enable-annotation/</guid><description>Начиная с версии 3.1 Spring поддерживает декларативное включение необходимой функциональности через, так называемые, @Enable* аннотации. Пример таких аннотаций: org.springframework.web.servlet.config.annotation.EnableWebMvc, org.springframework.cache.annotation.EnableCaching, org.springframework.scheduling.annotation.EnableAsync и другие.
В продолжение темы прошлого поста, я хочу показать, как можно добавить собственную @Enable аннотацию.
Для автоматического создания клиента для REST-ресурса нам необходима следующая информация:</description></item><item><title>@Autowired JAX-RS Client API</title><link>https://uthark.github.io/2013/06/28/jaxrs-spring-autowiring/</link><pubDate>Fri, 28 Jun 2013 00:00:00 +0000</pubDate><guid>https://uthark.github.io/2013/06/28/jaxrs-spring-autowiring/</guid><description>Продолжая разговор о JAX RS Client API - предположим, что мы уже используем JAX-RS клиент
У нас есть класс, который умеет создавать прокси для любого REST-интерфейса в проекте. Теперь мы хотим сделать так, чтобы эти интерфейсы можно было автоматически создавать в контексте Spring и связывать с другими бинами.</description></item><item><title>JAX-RS Client API</title><link>https://uthark.github.io/2013/06/28/jaxrs/</link><pubDate>Fri, 28 Jun 2013 00:00:00 +0000</pubDate><guid>https://uthark.github.io/2013/06/28/jaxrs/</guid><description>JAX-RS - набор Java API для работы с REST сервисами. Существует несколько реализаций, о которых я уже писал раньше.
Предположим, что проект А выставляет наружу REST API, который мы хотим использовать в проекте Б. Очевидно, что сразу возникает вопрос - можно ли переиспользовать классы модели и интерфейс в другом проекте.</description></item><item><title>@Autowiring EJBs with Spring</title><link>https://uthark.github.io/2013/06/19/autowiring-factorybean/</link><pubDate>Wed, 19 Jun 2013 00:00:00 +0000</pubDate><guid>https://uthark.github.io/2013/06/19/autowiring-factorybean/</guid><description>Предположим, что у нас есть проект на Spring, в котором необходимо использовать внешние EJB. Для получения бинов необходимо создавать InitialContext и делать lookup() нужных ejb. Но эту задачу можно автоматизировать и пользоваться @Autowired, то есть код будет выглядеть вот так:</description></item><item><title>Валидация входных параметров с использованием Spring</title><link>https://uthark.github.io/2013/06/19/validation/</link><pubDate>Wed, 19 Jun 2013 00:00:00 +0000</pubDate><guid>https://uthark.github.io/2013/06/19/validation/</guid><description>Очень часто возникает задача проверки входных параметров в сервис на корректность с точки зрения бизнес логики.
Эту задачу можно решить в лоб, написав вручную код валидации в каждом из методов сервиса, например, вот так:
public User save(User user) { if(user == null) { throw new IllegalArgumentException(&amp;#34;User is null&amp;#34;); } // other checks //.</description></item><item><title>Использование memcached в качестве backend для Spring Caching Abstraction</title><link>https://uthark.github.io/2013/06/19/spring-caching/</link><pubDate>Wed, 19 Jun 2013 00:00:00 +0000</pubDate><guid>https://uthark.github.io/2013/06/19/spring-caching/</guid><description>В Spring 3.1 появился замечательный модуль - Spring Cache, который является абстракцией над кэшированием, что позволяет декларативно реализовывать кэширование в приложении.
Я не буду вдаваться в подробности работы, их можно прочитать в документации, но опишу, каким образом можно настроить memcached в качестве бэкэнда для работы.</description></item><item><title>Пишем валидатор для Bean Validation API</title><link>https://uthark.github.io/2013/06/19/custom-bean-validator/</link><pubDate>Wed, 19 Jun 2013 00:00:00 +0000</pubDate><guid>https://uthark.github.io/2013/06/19/custom-bean-validator/</guid><description>JSR-303 предоставляет удобный API для проверки валидности объектов, а также входных параметров. Очевидно, что стандартных валидаторов в какой-то момент может быть недостаточно, поэтому необходимо писать собственный.
Хочу показать на примере валидации запроса к MongoDB, как легко это делается.
Создание аннотации @Target({FIELD, PARAMETER}) @Retention(RUNTIME) @Documented @Constraint(validatedBy = {MongoQueryValidator.</description></item><item><title>Автоматизируем работу с виртуальными машинами с помощью Vagrant</title><link>https://uthark.github.io/2012/10/24/vagrant/</link><pubDate>Wed, 24 Oct 2012 00:00:00 +0000</pubDate><guid>https://uthark.github.io/2012/10/24/vagrant/</guid><description>Современные enterprise проекты очень часто имеют очень сложную инфраструктуру для развёртывания. Кроме того, во время разработки часто используются виртуальные машины. Например, может использоваться несколько виртуальных машин, на которых развёрнуты различные конфигурации софта.
Vagrant - это средство для управления виртуальными машинами на базе Virtualbox.</description></item><item><title>Собственная реализация методов в Spring Data JPA</title><link>https://uthark.github.io/2012/04/28/spring-data-jpa_28/</link><pubDate>Sat, 28 Apr 2012 15:03:00 +0000</pubDate><guid>https://uthark.github.io/2012/04/28/spring-data-jpa_28/</guid><description>Очевидно, что мы не всегда можем воспользоваться автоматической генерацией кода, предоставляемой Spring Data JPA. Например, у нас слишком сложный запрос, или нам необходимо вызвать процедуру в базе данных, либо у нас сложная бизнес-логика.
Рассмотрим следующий пример - например, нам нужна функциональность уникального счётчика, который мы решили реализовать с помощью последовательности (sequence).</description></item><item><title>Ищем с помощью Spring Data JPA</title><link>https://uthark.github.io/2012/04/24/spring-data-jpa/</link><pubDate>Tue, 24 Apr 2012 14:04:00 +0000</pubDate><guid>https://uthark.github.io/2012/04/24/spring-data-jpa/</guid><description>Рассмотрим подробнее одну из наиболее полезных вещей в Spring Data JPA - генерация JPQL-запросов на основе имени метода.
Spring Data JPA умеет автоматически генерировать запросы используя для подсказки название метода.
Например, метод User.findByLoginAndPassword сгенерирует примерно следующий код:
FROMUseruwhereu.login=:loginandpassword=:passwordВообще Spring Data JPA пытается быть умным, поэтому реализация findBy{&amp;hellip;} методов ищется следующим образом:</description></item><item><title>Использование BeanPostProcessor на примере журналирования</title><link>https://uthark.github.io/2012/04/20/beanpostprocessor/</link><pubDate>Fri, 20 Apr 2012 15:51:00 +0000</pubDate><guid>https://uthark.github.io/2012/04/20/beanpostprocessor/</guid><description>Сегодня я хочу рассказать, как можно сделать инициализацию логгера в классе с использованием аннотаций и BeanPostProcessor
Очень часто мы инициализируем логгер следующим образом:
public class MyClass { private static final Logger LOG = LoggerFactory.getLogger(MyClass.class); } Я покажу, как сделать, чтобы можно было писать вот так:</description></item><item><title>Преобразуем строку в дату</title><link>https://uthark.github.io/2012/04/20/blog-post/</link><pubDate>Fri, 20 Apr 2012 15:25:00 +0000</pubDate><guid>https://uthark.github.io/2012/04/20/blog-post/</guid><description>Казалось бы, есть простейшая задача - преобразовать строковое представление даты в объект класса java.util.Date.
Как оказалось, иногда использование DateFormat не помогает. В случае, если строка - это заголовок Date из письма, то нам нужно использовать javax.mail.internet.MailDateFormat для преобразования такой строки.</description></item><item><title>Упрощаем работу с JPA при помощи Spring Data JPA</title><link>https://uthark.github.io/2012/02/23/jpa-spring-data-jpa/</link><pubDate>Thu, 23 Feb 2012 02:17:00 +0000</pubDate><guid>https://uthark.github.io/2012/02/23/jpa-spring-data-jpa/</guid><description>Введение Уже прошло несколько лет с тех пор, как появился JPA. Работа с EntityManager увлекательна, но разработчики пишут красивый API, а подробности работы с базой данных скрывают. При этом частая проблема - дублирование имплементации, когда из одного DAO в другой у нас плавно перекочёвывает один и тот же код, в лучшем случае этот код переносится в абстрактный базовый DAO.</description></item><item><title>Разработка и тестирование Java REST веб-сервисов</title><link>https://uthark.github.io/2012/02/09/java-rest/</link><pubDate>Thu, 09 Feb 2012 01:05:00 +0000</pubDate><guid>https://uthark.github.io/2012/02/09/java-rest/</guid><description>Введение Для разработки REST веб-сервисов Java предлагает JSR-311 - JAX-RS: The Java&amp;trade; API for RESTful Web Services Как это обычно бывает в мире Enterprise Java, существует несколько реализаций данной спецификации: Jersey - это эталонная реализация спецификации от компании Sun Oracle Apache CXF JBoss RESTEasy На примере последней реализации, я и расскажу, каким образом можно написать REST-сервис.</description></item><item><title>Немножко магии от AspectJ</title><link>https://uthark.github.io/2012/01/28/aspectj/</link><pubDate>Sat, 28 Jan 2012 02:43:00 +0000</pubDate><guid>https://uthark.github.io/2012/01/28/aspectj/</guid><description>Наверно, вы уже сталкивались с таким понятием, как AOП - аспектно-ориентированное программирование.
Обычно, про него вспоминают, когда говорят про декларативное использование транзакций, про проверку прав доступа, либо про реализацию журналирования.
Но это не единственные области применения АОП.
Я хочу показать ещё пару областей применения из реальных проектов:</description></item><item><title>Немного о виртуальных методах в Java</title><link>https://uthark.github.io/2011/07/21/java/</link><pubDate>Thu, 21 Jul 2011 12:06:00 +0000</pubDate><guid>https://uthark.github.io/2011/07/21/java/</guid><description>Сегодня я хочу рассмотреть некоторые особенности переопределения методов в Java. В java нельзя переопределить: поля класса конструкторы, инициализаторы класса статические методы статические поля
Подробнее об этом можно прочитать в Java Language Specification, §8.4.8
Итак, в java все нестатические неприватные (то есть, protected, package и public) методы являются виртуальными.</description></item><item><title>Сокращаем ссылки на андроиде</title><link>https://uthark.github.io/2010/12/06/blog-post/</link><pubDate>Mon, 06 Dec 2010 23:11:00 +0000</pubDate><guid>https://uthark.github.io/2010/12/06/blog-post/</guid><description>ВступлениеВстала передо мной задача - сокращать ссылки перед тем, как отправлять их в Twitter. Для решения этой задачи я решил использовать bit.ly, благо, их API внятный и простой. Программируем!Решение нарисовалось в виде следующего класса: import org.apache.http.HttpEntity; import org.apache.http.HttpResponse; import org.apache.http.NameValuePair; import org.</description></item><item><title>Удаление различных диакритических символов из строки</title><link>https://uthark.github.io/2010/05/22/blog-post/</link><pubDate>Sat, 22 May 2010 00:52:00 +0000</pubDate><guid>https://uthark.github.io/2010/05/22/blog-post/</guid><description>Возникла проблема - каким образом заменить в строке символы из национальных кодировок на соответствующие им из латиницы.
Например, из строки explicación получить explicacion.
package com.blogspot.atamanenko; import java.text.Normalizer; import java.text.Normalizer.Form; public class StringNormalizer { public static String normalize(String string) { return Normalizer.</description></item><item><title>Создание больших объёмов тестовых данных с помощью Databene Benerator</title><link>https://uthark.github.io/2010/05/22/databene-benerator/</link><pubDate>Sat, 22 May 2010 00:26:00 +0000</pubDate><guid>https://uthark.github.io/2010/05/22/databene-benerator/</guid><description>Периодически необходимо решать задачу создания больших ( и не очень) объёмов тестовых данных для проведения различных видов тестирования - функционального, нагрузочного (тестирование стабильности и производительности). При этом часто получается так, что система на тестовых данных ведёт себя совсем иначе, чем на реальных данных.</description></item><item><title>Несколько слов о GORM</title><link>https://uthark.github.io/2010/04/11/gorm/</link><pubDate>Sun, 11 Apr 2010 11:45:00 +0000</pubDate><guid>https://uthark.github.io/2010/04/11/gorm/</guid><description>В данной заметке хочу поделиться некоторыми моментами использования GORM.
GORM - это ORM-фреймворк, используемый в Grails. Реализован он поверх Hibernate, но, при этом, с некоторыми отличными умолчаниями.
Для разработчиков, знающих Hibernate, рекомендую тщательно изучить GORM, так как его поведение в некоторых случаях отлично от Hibernate, что может приводить к различным сюрпризам.</description></item><item><title>Общение со Skype через D-Bus на Python</title><link>https://uthark.github.io/2010/03/22/skype-d-bus-python/</link><pubDate>Mon, 22 Mar 2010 23:50:00 +0000</pubDate><guid>https://uthark.github.io/2010/03/22/skype-d-bus-python/</guid><description>Summary: в данной заметке описывается работа с программой Skype через D-Bus на Python.
Введение Захотелось мне странного - когда я ухожу домой, мне нужно выключить amarok, kopete и Skype. Собственно, решено было через D-Bus отправлять вышеперечисленным приложениям релевантные сообщения.
Используем dbus-send Сначала я использовал обычный dbus-send, что оформилось в виде следующего скрипта go2home:</description></item><item><title>Разработка макроса для TiddlyWiki</title><link>https://uthark.github.io/2010/03/21/tiddlywiki/</link><pubDate>Sun, 21 Mar 2010 20:54:00 +0000</pubDate><guid>https://uthark.github.io/2010/03/21/tiddlywiki/</guid><description>Summary: Пример разработки плагина для TiddlyWiki
Вступление TiddlyWiki - это вики-движок, полностью написанный на JavaScript и хранящийся в одном файле (как сам движок, так и содержимое). Создатели позиционируют его как &amp;quot;переиспользуемую нелинейную персональную веб записную книжку&amp;quot;.
Я давно использую TiddlyWiki в различных целях:</description></item><item><title>Борьба с убийцами производительности</title><link>https://uthark.github.io/2010/03/16/blog-post/</link><pubDate>Tue, 16 Mar 2010 21:52:00 +0000</pubDate><guid>https://uthark.github.io/2010/03/16/blog-post/</guid><description>Summary: Мой опыт борьбы с &amp;quot;убийцами производительности&amp;quot;.
Постановка проблемы Иногда бывает так, что хочется отвлечься от работы, от поставленной задачи на какую-нибудь фигню, лишь бы не заниматься текущей задачей. У меня это чаще всего сводилось к тому, что я начинал читать что-нибудь в сети (Google Reader, Habrahabr, LOR, etc).</description></item><item><title>Список для проверки при оптимизации Grails приложений</title><link>https://uthark.github.io/2010/02/06/grails/</link><pubDate>Sat, 06 Feb 2010 23:31:00 +0000</pubDate><guid>https://uthark.github.io/2010/02/06/grails/</guid><description>Выкладываю ниже список задач, которые нужно/можно выполнить для оптимизации приложения, написанного на Grails, может кому пригодится.
Тестирование проведённых оптимизаций Первым делом необходимо разработать критерии проверки, которые позволят оценить эффективность проведённых оптимизаций.
Установить Java Melody плагин для Grails для проведения анализа.</description></item><item><title>Вложенные транзакции в базах данных</title><link>https://uthark.github.io/2010/02/05/blog-post/</link><pubDate>Fri, 05 Feb 2010 01:20:00 +0000</pubDate><guid>https://uthark.github.io/2010/02/05/blog-post/</guid><description>Summary: Некоторые особенности вложенных транзакций.
Иногда бывает так, что при обработке запроса необходимо открыть ещё одну транзакцию в рамках текущей транзакции. Это называется вложенной транзакцией. Очень многие базы данных не поддерживают вложенные транзакции вообще, например, MySQL и Oracle. А те, что поддерживают, делают это на минимальном уровне, например, Sybase поддерживает только псевдовложенные транзакции.</description></item><item><title>Настройка autofs для монтирования NFS-ресурсов</title><link>https://uthark.github.io/2009/12/14/autofs-nfs/</link><pubDate>Mon, 14 Dec 2009 23:14:00 +0000</pubDate><guid>https://uthark.github.io/2009/12/14/autofs-nfs/</guid><description>Summary: В данной заметке описана настройка autofs для доступа к сетевым ресурсам, доступным по NFS.
Последние несколько лет (с тех пор, как количество компьютеров дома стало больше одного) возникла проблема беспрепятственного доступа к данным, хранящимся на одном компьютере с другого.</description></item><item><title>Расширение для работы с Delicious доступно на сайте расширений Google Chrome</title><link>https://uthark.github.io/2009/12/08/delicious-google-chrome/</link><pubDate>Tue, 08 Dec 2009 23:43:00 +0000</pubDate><guid>https://uthark.github.io/2009/12/08/delicious-google-chrome/</guid><description>Итак, расширение для работы с Delicious доступно на сайте расширений Google Chrome.
Посмотреть и установить
Новые версии расширения буду закачить на этот сайт.</description></item><item><title>Использование Dropbox для хранения конфигурационных файлов</title><link>https://uthark.github.io/2009/12/08/dropbox/</link><pubDate>Tue, 08 Dec 2009 23:17:00 +0000</pubDate><guid>https://uthark.github.io/2009/12/08/dropbox/</guid><description>Есть такой замечательный сервис - Dropbox. Этот сервис является онлайн-хранилищем ваших данных. Работает очень просто:
Вы регистрируетесь в сервисе.
Устанавливаете клиент
Пользуетесь.
Недавно я понял, что этот сервис можно легко и непринуждённо использовать не только для хранения различных документов и фотографий, а также и конфигурационных файлов приложений, что существенно упрощает жизнь, когда у вас несколько рабочих машин (например, у меня домашний компьютер, ноутбук, а также ещё и рабочий) - необходимо каким-то образом синхронизовать конфиги при изменении их на одной из машине с другими.</description></item><item><title>Дайджест ссылок в RSS-ленте</title><link>https://uthark.github.io/2009/12/07/rss_07/</link><pubDate>Mon, 07 Dec 2009 19:25:00 +0000</pubDate><guid>https://uthark.github.io/2009/12/07/rss_07/</guid><description>Решил убрать дайджест ссылок из RSS-ленты.
Те, кому это нужно могут сделать следующее:
1. Добавить в свой RSS-аггрегатор ленту http://feeds.delicious.com/v2/rss/dark.schakal?count=15
2. Если вы используете сервис Delicious, то можете меня добавить меня в свою сеть по ссылке: http://delicious.com/settings/networkadd?networkadd=dark.schakal</description></item><item><title>RSS лента блога и дайджест ссылок за предыдущий день</title><link>https://uthark.github.io/2009/12/06/rss/</link><pubDate>Sun, 06 Dec 2009 01:32:00 +0000</pubDate><guid>https://uthark.github.io/2009/12/06/rss/</guid><description>Как вы уже могли заметить, RSS теперь содержит дайджест интересных мне ссылок, которые я нашёл в сети за последнее время.
Отпишитесь в комментариях стоит ли это оставить, или убрать дайджест ссылок из ленты?</description></item><item><title>RabbitVCS - расширение для Nautilus для работы с Subversion</title><link>https://uthark.github.io/2009/12/06/nautilus-subversion/</link><pubDate>Sun, 06 Dec 2009 01:03:00 +0000</pubDate><guid>https://uthark.github.io/2009/12/06/nautilus-subversion/</guid><description>Раньше я использовал коллекцию скриптов nautilussvn, весьма неудобную в использовании.
Бродя по просторам сети наткнулся на отличную замену. Встречайте - RabbitVCS.
ВозможностиИнтеграция с Nautilus Поддержка Subversion Полная локализация Поддержка командной строки Доступны пакеты для различных дистрибутивов Установка
Для Ubuntu Hardy, Intepid, Jaunty</description></item><item><title>Расширение Delicious Plugin идёт в массы</title><link>https://uthark.github.io/2009/11/25/delicious-plugin/</link><pubDate>Wed, 25 Nov 2009 23:16:00 +0000</pubDate><guid>https://uthark.github.io/2009/11/25/delicious-plugin/</guid><description>Google запустил сайт Chrome Extensions.
В данный момент сайт доступен только разработчикам расширений. Залил расширение, написал кратенькое описание. Жду запуска сайта. :)
А пока сайт закрыт для рядовых пользователей последнюю версию можно скачать тут.
P.S. А тем временем работа над расширением продолжается.</description></item><item><title>Создание страницы настроек для расширений Google Chrome</title><link>https://uthark.github.io/2009/11/24/google-chrome/</link><pubDate>Tue, 24 Nov 2009 23:09:00 +0000</pubDate><guid>https://uthark.github.io/2009/11/24/google-chrome/</guid><description>В продолжение предыдущей заметки
Логично предположить, что у расширений могут быть настройки. В Google Chrome/Chromium для этого есть специальный API.
Для того, чтобы создать собственную страницу настроек необходимо сделать следующее:
Объявить в манифесте страницу настроек
{ "name": "</description></item><item><title>Расширение Delicious Bookmarks для Google Chrome/Chromium</title><link>https://uthark.github.io/2009/11/14/delicious-bookmarks-google/</link><pubDate>Sat, 14 Nov 2009 22:34:00 +0000</pubDate><guid>https://uthark.github.io/2009/11/14/delicious-bookmarks-google/</guid><description>Введение
Решил научиться писать собственные расширения для Google Chrome/Chromium.
За идею взял официальное расширение от Yahoo! для Firefox - Delicious Bookmarks.
Структура расширения
Расширение - файл с расширением .crx. На самом деле это просто ZIP-архив с файлом манифеста внутри.
Файл манифеста{ "</description></item><item><title>Инвайты на Google Wave</title><link>https://uthark.github.io/2009/11/02/google-wave/</link><pubDate>Mon, 02 Nov 2009 23:26:00 +0000</pubDate><guid>https://uthark.github.io/2009/11/02/google-wave/</guid><description>Кому нужны инвайты на Google Wave, отписываемся в комментариях - поделюсь.
UPD. Инвайты закончились, всем спасибо.</description></item><item><title>Двунаправленная ссылочная целостность</title><link>https://uthark.github.io/2009/07/07/blog-post/</link><pubDate>Tue, 07 Jul 2009 22:11:00 +0000</pubDate><guid>https://uthark.github.io/2009/07/07/blog-post/</guid><description>Здравствуйте.
Я считаю, что разработчику всегда стоит иметь представление о том, как работают низлежащие абстракции. Хотя бы потому, что часто абстракции бывают протекающими.
А веду я это к тому, что когда фреймворк вываливает стектрейс с несколькими вложенными (и, часто, для непосвященных непонятными) исключениями, то бывает непонятно, что с этим делать, особенно, если не знаешь, как реализована абстракция.</description></item><item><title>Opera и del.icio.us</title><link>https://uthark.github.io/2009/07/04/opera-delicious/</link><pubDate>Sat, 04 Jul 2009 01:13:00 +0000</pubDate><guid>https://uthark.github.io/2009/07/04/opera-delicious/</guid><description>Так получилось, что в последнее время я стал пользоваться небезызвестной оперой.
В связи с этим я стал искать замену часто используемым расширениям, одно из них - delicious bookmarks. Сервис del.icio.us предоставляет букмарклеты для различных браузеров, которые позволяют сохранять закладки быстро и удобно.</description></item><item><title>Spring Roo (часть 2)</title><link>https://uthark.github.io/2009/06/06/spring-roo-2/</link><pubDate>Sat, 06 Jun 2009 22:19:00 +0000</pubDate><guid>https://uthark.github.io/2009/06/06/spring-roo-2/</guid><description>Архитектура сгенерированного приложения Spring Roo активно использует аспекты. В качестве реализации аспектов была взята библиотека aspectj. Большая часть сгенерированного кода попадает в отдельные файлы-аспекты. Создадим простой класс: ```bash new persistent class jpa -name ~.domain.Action -testAutomatically add field string name -notNull -sizeMin 1 -sizeMax 80 add field string description -sizeMax 1024 ``` Spring Roo создаст нам следующие файлы: Action.</description></item><item><title>Введение в Spring Roo</title><link>https://uthark.github.io/2009/06/03/spring-roo/</link><pubDate>Wed, 03 Jun 2009 00:06:00 +0000</pubDate><guid>https://uthark.github.io/2009/06/03/spring-roo/</guid><description>Недавно компания Spring Source презентовала новый продукт - Spring Roo. Цель проекта - повысить продуктивность Java-разработчиков. Почитав обзоры, а также потрогав его руками можно сделать вывод о том, что это, в некотором виде, альтернатива AppFuse и Grails.
Описание Spring Roo100% программирование на Java, предлагающее разработчикам известную, развитую и популярную платформу разработки.</description></item><item><title>Apache Ant и Metro</title><link>https://uthark.github.io/2009/06/02/apache-ant-metro/</link><pubDate>Tue, 02 Jun 2009 23:31:00 +0000</pubDate><guid>https://uthark.github.io/2009/06/02/apache-ant-metro/</guid><description>Столкнулся с такой проблемой - в некоторых случаях приложение, собранное антом не работает. Конкретно - не работает десереализация запросов на веб-сервис. Получаемый запрос содержит null в значениях полей.
Опытным путём было выяснено, что на это влияет используемая версия Java. Под 1.</description></item><item><title>Использование модификатора protected на полях в базовом классе</title><link>https://uthark.github.io/2009/05/30/protected/</link><pubDate>Sat, 30 May 2009 23:45:00 +0000</pubDate><guid>https://uthark.github.io/2009/05/30/protected/</guid><description>Недавно задали мне вопрос - что я думаю об использовании модификатора protected для членов базового класса? Под этим вопросом кроются более серьёзные вещи.
Например, любой член класса, имеющий модификатор protected, расширяет интерфейс базового класса для подклассов - подклассы имеют доступ ко всем protected и public методам этого поля.</description></item><item><title>Сферический программист в вакууме и абстрактное понятие качества кода в условиях Fixed-Price проектов (часть 2)</title><link>https://uthark.github.io/2009/05/27/fixed-price-2/</link><pubDate>Wed, 27 May 2009 01:26:00 +0000</pubDate><guid>https://uthark.github.io/2009/05/27/fixed-price-2/</guid><description>Причин для написания плохого кода может быть несколько. Некоторые из них лежат на поверхности:
Отсутствие опытаНевнимательность Некомпетентность Немотивированность Отсутствие опыта - казалось бы, самая простая причина проблемы; решение проблемы выглядит очевидным - со временем, разработчик будет писать код лучше. Но это ошибочное мнение.</description></item><item><title>Сферический программист в вакууме и абстрактное понятие качества кода в условиях Fixed-Price проектов (часть 1)</title><link>https://uthark.github.io/2009/05/27/fixed-price-1/</link><pubDate>Wed, 27 May 2009 00:36:00 +0000</pubDate><guid>https://uthark.github.io/2009/05/27/fixed-price-1/</guid><description>В последнее время всё чаще задумываюсь о том, почему разработчики пишут плохой и некачественный код. Под кодом я подразумеваю не только сам код, но и, в том числе, архитектуру и дизайн.
Плохим кодом я считаю следущий:
Невыполняющий функциональные требованияНевыполняющий нефункциональные требованияНепокрытый тестамиПлохо тестируемыйПлохо поддерживаемыйС багамиНеоптимальныйЕсли код не выполняет функциональные требования, то этот код вообще ничего не стоит.</description></item><item><title>Google Application Engine</title><link>https://uthark.github.io/2009/05/23/google-application-engine/</link><pubDate>Sat, 23 May 2009 23:00:00 +0000</pubDate><guid>https://uthark.github.io/2009/05/23/google-application-engine/</guid><description>Посмотрел на Google App Engine (GAE).
При своей цене (= бесплатно) это очень хороший сервис.
GAE - это инфраструктура для запуска веб-приложений на серверах Google. То, что сейчас модно называть cloud computing.
На презентации платформы в 2008 году Google объявил только о поддержке Python.</description></item><item><title>Eclipse и его расширения</title><link>https://uthark.github.io/2009/05/03/eclipse/</link><pubDate>Sun, 03 May 2009 00:18:00 +0000</pubDate><guid>https://uthark.github.io/2009/05/03/eclipse/</guid><description>Многие ругают Eclipse за то, что там нет многого из того, что есть в коробке у Jetbrains Intellij IDEA. Мне всегда казалось это не очень корректным, так как Eclipse в первую очередь платформа, а уже потом - среда для Java разработки.</description></item><item><title>Критерии выбора блокировок</title><link>https://uthark.github.io/2009/04/26/blog-post_26/</link><pubDate>Sun, 26 Apr 2009 15:30:00 +0000</pubDate><guid>https://uthark.github.io/2009/04/26/blog-post_26/</guid><description>Так как использование блокировок по-разному влияет на производительность, необходимо выбирать, в каких случаях какой вид блокировок лучше использовать.
.nobr br { display: none } Условие Пессимистичная Оптимистичная Сверх-оптимистичная Конфликты часты + − − Конфликты редки − + − Данные только добавляются (например, журнал) − − + Данные только читаются (справочники) − − + Критерии выбора блокировок</description></item><item><title>Транзакции в реляционных базах данных</title><link>https://uthark.github.io/2009/04/24/blog-post_24/</link><pubDate>Fri, 24 Apr 2009 21:49:00 +0000</pubDate><guid>https://uthark.github.io/2009/04/24/blog-post_24/</guid><description>При работе в многопользовательском окружении может возникнуть ситуация, когда разные пользователи или системы обновляют одни и те же данные. Это может привести к ситуации, когда один из пользователей изменит данные, которые уже изменял другой пользователь и приведёт либо к потере данных, либо к переводу данных в неконсистентное состояние.</description></item><item><title>Кратко о блокировках в БД</title><link>https://uthark.github.io/2009/04/22/blog-post_22/</link><pubDate>Wed, 22 Apr 2009 23:58:00 +0000</pubDate><guid>https://uthark.github.io/2009/04/22/blog-post_22/</guid><description>Блокировка - в реляционных базах данных это установка метки на запись, что запись заблокирована для изменений.
Существует два вида блокировок - оптимистичная и пессимистичная.
Оптимистичная блокировка При оптимистичной блокировке на базе данных реальной блокировки не происходит. Вместо этого используется следующий подход - если во время выполнения транзакции она изменяет данные, которые были изменены после её начала, то транзакция прерывается с исключением.</description></item><item><title>Практический опыт использования фолксономии в условиях неограниченной свободы расстановки меток (часть 2)</title><link>https://uthark.github.io/2009/04/22/2/</link><pubDate>Wed, 22 Apr 2009 00:14:00 +0000</pubDate><guid>https://uthark.github.io/2009/04/22/2/</guid><description>В продолжение предыдущей заметки.
Для работы с del.icio.us я использую официальный плагин от Yahoo!.
Он предоставляет следующие возможности:
Синхронизация закладок из Firefox с del.icio.us Переопределение стандартного менеджера закладок. Отслеживание изменений на del.icio.us. Интерфейс для отображения и поиска закладок в панели браузера.</description></item><item><title>Практический опыт использования фолксономии в условиях неограниченной свободы расстановки меток</title><link>https://uthark.github.io/2009/04/19/blog-post/</link><pubDate>Sun, 19 Apr 2009 12:48:00 +0000</pubDate><guid>https://uthark.github.io/2009/04/19/blog-post/</guid><description>Уже более двух лет я использую del.icio.us.
Недавно возник вопрос - а вот каким образом можно наиболее эффективно использовать теги? Для себя я придумал вот такой вариант использования - сделал tag bundle Actions, в который поместил теги, диктующие дальнейшие действия.</description></item></channel></rss>