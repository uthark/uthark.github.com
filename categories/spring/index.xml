<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>spring on Oleg Atamanenko</title><link>https://uthark.github.io/categories/spring/</link><description>Recent content in spring on Oleg Atamanenko</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 01 Mar 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://uthark.github.io/categories/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>Automatic query modification with Spring Data Mongo</title><link>https://uthark.github.io/2014/03/01/restricting-mongo-template/</link><pubDate>Sat, 01 Mar 2014 00:00:00 +0000</pubDate><guid>https://uthark.github.io/2014/03/01/restricting-mongo-template/</guid><description>Introduction Today I want to show how one can automatically apply additional restrictions on MongoDB Queries with MongoTemplate or Spring Data Mongo.
Implementation First, let&amp;rsquo;s introduce interface QueryModifier.
import org.springframework.data.mongodb.core.query.Query; public interface QueryModifier { /** * Modifies source query according to the rules.</description></item><item><title>Пишем @Enable*-аннотацию для Spring</title><link>https://uthark.github.io/2013/06/29/spring-enable-annotation/</link><pubDate>Sat, 29 Jun 2013 00:00:00 +0000</pubDate><guid>https://uthark.github.io/2013/06/29/spring-enable-annotation/</guid><description>Начиная с версии 3.1 Spring поддерживает декларативное включение необходимой функциональности через, так называемые, @Enable* аннотации. Пример таких аннотаций: org.springframework.web.servlet.config.annotation.EnableWebMvc, org.springframework.cache.annotation.EnableCaching, org.springframework.scheduling.annotation.EnableAsync и другие.
В продолжение темы прошлого поста, я хочу показать, как можно добавить собственную @Enable аннотацию.</description></item><item><title>@Autowired JAX-RS Client API</title><link>https://uthark.github.io/2013/06/28/jaxrs-spring-autowiring/</link><pubDate>Fri, 28 Jun 2013 00:00:00 +0000</pubDate><guid>https://uthark.github.io/2013/06/28/jaxrs-spring-autowiring/</guid><description>Продолжая разговор о JAX RS Client API - предположим, что мы уже используем JAX-RS клиент
У нас есть класс, который умеет создавать прокси для любого REST-интерфейса в проекте. Теперь мы хотим сделать так, чтобы эти интерфейсы можно было автоматически создавать в контексте Spring и связывать с другими бинами.</description></item><item><title>Использование BeanPostProcessor на примере журналирования</title><link>https://uthark.github.io/2012/04/20/beanpostprocessor/</link><pubDate>Fri, 20 Apr 2012 15:51:00 +0000</pubDate><guid>https://uthark.github.io/2012/04/20/beanpostprocessor/</guid><description>Сегодня я хочу рассказать, как можно сделать инициализацию логгера в классе с использованием аннотаций и BeanPostProcessor
Очень часто мы инициализируем логгер следующим образом:
public class MyClass { private static final Logger LOG = LoggerFactory.</description></item><item><title>Упрощаем работу с JPA при помощи Spring Data JPA</title><link>https://uthark.github.io/2012/02/23/jpa-spring-data-jpa/</link><pubDate>Thu, 23 Feb 2012 02:17:00 +0000</pubDate><guid>https://uthark.github.io/2012/02/23/jpa-spring-data-jpa/</guid><description>Введение Уже прошло несколько лет с тех пор, как появился JPA. Работа с EntityManager увлекательна, но разработчики пишут красивый API, а подробности работы с базой данных скрывают. При этом частая проблема - дублирование имплементации, когда из одного DAO в другой у нас плавно перекочёвывает один и тот же код, в лучшем случае этот код переносится в абстрактный базовый DAO.</description></item></channel></rss>