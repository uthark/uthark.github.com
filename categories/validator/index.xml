<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Validator on Software Development and related activities</title>
    <link>https://uthark.github.io/categories/validator/</link>
    <description>Recent content in Validator on Software Development and related activities</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Jun 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://uthark.github.io/categories/validator/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Пишем валидатор для Bean Validation API</title>
      <link>https://uthark.github.io/2013/06/19/custom-bean-validator/</link>
      <pubDate>Wed, 19 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://uthark.github.io/2013/06/19/custom-bean-validator/</guid>
      <description>JSR-303 предоставляет удобный API для проверки валидности объектов, а также входных параметров. Очевидно, что стандартных валидаторов в какой-то момент может быть недостаточно, поэтому необходимо писать собственный.
Хочу показать на примере валидации запроса к MongoDB, как легко это делается.
Создание аннотации @Target({FIELD, PARAMETER}) @Retention(RUNTIME) @Documented @Constraint(validatedBy = {MongoQueryValidator.class}) public @interface MongoQuery { String message() default &amp;#34;Invalid mongo query&amp;#34;; Class&amp;lt;?&amp;gt;[] groups() default {}; Class&amp;lt;? extends Payload&amp;gt;[] payload() default {}; } Обратите внимание на аннотацию @Constraint - она описывает, какой класс будет проводить реальную валидацию.</description>
    </item>
    
  </channel>
</rss>