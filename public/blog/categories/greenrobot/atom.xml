<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Greenrobot | Software Development and related activities]]></title>
  <link href="http://uthark.github.io/blog/categories/greenrobot/atom.xml" rel="self"/>
  <link href="http://uthark.github.io/"/>
  <updated>2017-10-12T19:01:44-04:00</updated>
  <id>http://uthark.github.io/</id>
  <author>
    <name><![CDATA[Oleg Atamanenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Limiting Threads Count for GreenRobot EventBus]]></title>
    <link href="http://uthark.github.io/blog/2014/03/06/limiting-threads-count-for-greenrobot-eventbus/"/>
    <updated>2014-03-06T22:38:54-05:00</updated>
    <id>http://uthark.github.io/blog/2014/03/06/limiting-threads-count-for-greenrobot-eventbus</id>
    <content type="html"><![CDATA[<p>In one of my projects I used <a href="https://github.com/greenrobot/EventBus">EventBus</a> library. The library is pretty cool and I would recommend everybody to use it.</p>

<p>But I found one small issue with this library &ndash; in case you send too many events very fast (i.e. more than 1000 per second) you may face issue with application crash due to inability to create new thread.</p>

<p>The problem is lying in the used <code>ExecutorService</code>:</p>

<p>``` java</p>

<p>package de.greenrobot.event;
// imports
public final class EventBus {</p>

<pre><code>static ExecutorService executorService = Executors.newCachedThreadPool();

// class content skipped 
</code></pre>

<p>}</p>

<p>```</p>

<p>As you can see, it calls <code>newCachedThreadPool</code> method to create thread pool.</p>

<p>From <a href="http://developer.android.com/reference/java/util/concurrent/Executors.html#newCachedThreadPool()">javadoc</a> for this method:</p>

<blockquote><p>Creates a thread pool that creates new threads as needed, but will reuse
previously constructed threads when they are available.</p></blockquote>

<p>This is where we hit the wall &ndash; if we send too many requests and each request is slow (i.e. saving into database or network request) then we will try to create too many threads and app will crash.</p>

<p>Thankfully, <code>executorService</code> is <code>static</code> but not <code>final</code>. And this will allow us to solve the issue easily.</p>

<p>Let&rsquo;s create our configurer class in package <code>de.greenrobot.event</code> so we will be able to access <code>executorService</code> property which is package-visible and override it with different thread pool:</p>

<p>``` java EventBusExecutorServiceConfigurer</p>

<p>package de.greenrobot.event;</p>

<p>import java.util.concurrent.Executors;</p>

<p>public class EventBusExecutorServiceConfigurer {</p>

<pre><code>public void configureEventBus() {
    ExecutorService executorServiceToUse;
    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) {
        executorServiceToUse = (ExecutorService) AsyncTask.THREAD_POOL_EXECUTOR;
    } else {
        executorServiceToUse = Executors.newFixedThreadPool(
            Runtime.getRuntime().availableProcessors());
    }
    EventBus.executorService = executorServiceToUse;
}
</code></pre>

<p>}</p>

<p>```</p>

<p>Android 3.0+ has special <a href="http://developer.android.com/reference/android/os/AsyncTask.html#THREAD_POOL_EXECUTOR">THREAD_POOL_EXECUTOR</a> which is supposed to be used by asynchronous tasks, so we use it on newer devices. On older, pre-Honeycomb devices we create our own thread pool.</p>

<p>And then in Android application we configure <code>executorService</code>:</p>

<p>``` java</p>

<p>public class CustomApplication extends Application {</p>

<pre><code>@Override
public void onCreate() {
    super.onCreate();
    new EventBusExecutorServiceConfigurer().configureEventBus();

    // other initialization
}
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
