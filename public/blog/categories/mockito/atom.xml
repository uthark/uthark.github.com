<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mockito | Software Development and related activities]]></title>
  <link href="http://uthark.github.io/blog/categories/mockito/atom.xml" rel="self"/>
  <link href="http://uthark.github.io/"/>
  <updated>2017-10-12T19:01:44-04:00</updated>
  <id>http://uthark.github.io/</id>
  <author>
    <name><![CDATA[Oleg Atamanenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Initializing Mockito @Mocks With JUnit @Rule]]></title>
    <link href="http://uthark.github.io/blog/2014/03/28/initializing-at-mocks-with-junit-at-rule/"/>
    <updated>2014-03-28T13:24:45-04:00</updated>
    <id>http://uthark.github.io/blog/2014/03/28/initializing-at-mocks-with-junit-at-rule</id>
    <content type="html"><![CDATA[<p>In this post I will show how one can implement custom JUnit <a href="http://junit-team.github.io/junit/javadoc/4.11/org/junit/Rule.html">@Rule</a>.</p>

<p>As an example let&rsquo;s take <a href="https://code.google.com/p/mockito/">Mockito</a> and implement custom rule which will initialize Mocks in  test class.</p>

<p>By default, Mockito provides the following methods of mock initialization:</p>

<ol>
<li>Using <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#mock(java.lang.Class)">Mockito.mock</a></li>
</ol>


<p>``` java Initialize mocks with Mockito.mock</p>

<p>public void FooTest {</p>

<pre><code>private Foo foo;

@Before
public void setUp() {
    FooDependency dep = Mockito.mock(FooDependency.class);
    foo = new Foo(dep);
}
</code></pre>

<p>}</p>

<p>```</p>

<p>This is the simplest case.</p>

<ol>
<li>Using <a href="http://docs.mockito.googlecode.com/hg/org/mockito/MockitoAnnotations.html#initMocks(java.lang.Object)">MockitoAnnotations</a>.</li>
</ol>


<p>``` java Initialize mocks with MockitoAnnotations</p>

<p>public void FooTest {</p>

<pre><code>private Foo foo;

@Mock
private FooDependency dep;

@Before
public void setUp() {
    MockitoAnnotations.initMocks(this);
    foo = new Foo(dep);
}
</code></pre>

<p>}</p>

<p>```</p>

<p>This method is useful when you have a lot of mocks to inject.</p>

<ol>
<li>Using <a href="http://docs.mockito.googlecode.com/hg/org/mockito/runners/MockitoJUnitRunner.html">MockitoJUnitRunner</a></li>
</ol>


<p>``` java Initialize mocks with MockitoJUnitRunner</p>

<p>@RunWith(MockitoJUnitRunner.class)
public void FooTest {</p>

<pre><code>private Foo foo;

@Mock
private FooDependency dep;

@Before
public void setUp() {
    foo = new Foo(dep);
}
</code></pre>

<p>}</p>

<p>```</p>

<p>I want to show you another method, by using custom JUnit <code>@Rule</code>.</p>

<p>First, we need to implement <a href="http://junit-team.github.io/junit/javadoc/4.11/org/junit/rules/TestRule.html">TestRule</a> interface which allows to implement custom behaviour during test execution:</p>

<p>``` java MockitoInitializerRule</p>

<p>public class MockitoInitializerRule implements TestRule {</p>

<pre><code>private Object test;

public MockitoInitializerRule(Object test) {
    this.test = test;
}

@Override
public Statement apply(Statement base, Description description) {
    return new MockitInitilizationStatement(base, test);
}
</code></pre>

<p>}</p>

<p>```</p>

<p>We need to pass current test class instance to the rule, so it will be possible inject mocks into class instance. Actual implementation of our rule will go to new class &ndash; subclass of <a href="http://junit-team.github.io/junit/javadoc/4.11/org/junit/runners/model/Statement.html">Statement</a>:</p>

<p>``` java MockitInitilizationStatement</p>

<p>class MockitInitilizationStatement extends Statement {</p>

<pre><code>private final Statement base;
private Object test;

MockitInitilizationStatement(Statement base, Object test) {
    this.base = base;
    this.test = test;
}

@Override
public void evaluate() throws Throwable {
    MockitoAnnotations.initMocks(test);
    base.evaluate();
}
</code></pre>

<p>}</p>

<p>```</p>

<p>What we do is basically initialize mocks in the test class and then proceed with the test method execution.</p>

<p>Now, let&rsquo;s take a look at the usage of newly created Rule:</p>

<p>``` java Example usage of MockitoInitializerRule</p>

<p>public void FooTest {</p>

<pre><code>private Foo foo;

@Mock
private FooDependency dep;

@Rule
public TestRule mockitoInitializerRule = new MockitoInitializerRule(this);

@Before
public void setUp() {
    foo = new Foo(dep);
}
</code></pre>

<p>}</p>

<p>```</p>

<p>Comparing to variant with <code>MockitoJUnitRunner</code> this one provides ability to use custom <a href="http://junit-team.github.io/junit/javadoc/4.11/org/junit/runner/Runner.html">Runner</a>, i.e. we can continue to use <a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.html">SpringJUnit4ClassRunner</a></p>
]]></content>
  </entry>
  
</feed>
