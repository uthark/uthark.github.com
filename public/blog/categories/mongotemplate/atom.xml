<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mongotemplate | Software Development and related activities]]></title>
  <link href="http://uthark.github.io/blog/categories/mongotemplate/atom.xml" rel="self"/>
  <link href="http://uthark.github.io/"/>
  <updated>2017-10-12T19:01:44-04:00</updated>
  <id>http://uthark.github.io/</id>
  <author>
    <name><![CDATA[Oleg Atamanenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Automatic Query Modification With Spring Data Mongo]]></title>
    <link href="http://uthark.github.io/blog/2014/03/01/restricting-mongo-template/"/>
    <updated>2014-03-01T00:19:00-05:00</updated>
    <id>http://uthark.github.io/blog/2014/03/01/restricting-mongo-template</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>Today I want to show how one can automatically apply additional restrictions on <a href="http://www.mongodb.org/">MongoDB</a> Queries with <a href="http://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/MongoTemplate.html">MongoTemplate</a> or <a href="http://docs.spring.io/spring-data/mongodb/docs/current/reference/htmlsingle/">Spring Data Mongo</a>.</p>

<h3>Implementation</h3>

<p>First, let&rsquo;s introduce interface <code>QueryModifier</code>.</p>

<p>``` java Declaration of QueryModifier interface</p>

<p>import org.springframework.data.mongodb.core.query.Query;</p>

<p>public interface QueryModifier {</p>

<pre><code>/**
 * Modifies source query according to the rules.
 * @param query Source query to modify.
 * @param collectionName name of the collection against which query will be executed.
 * @return Modified query.
 */
Query modify(Query query, String collectionName);
</code></pre>

<p>}</p>

<p>```</p>

<p>Implementations of this interface will pickup original query and modify it somehow. In order to make it work we need inject this modification after query was generated by <code>Spring Data but before query is sent to the MongoDB instance. The perfect place for this is</code>MongoTemplate`.</p>

<p>So, let&rsquo;s create subclass of <code>MongoTemplate</code> and override <code>find()</code> and <code>executeQuery()</code> methods.</p>

<p>``` java RestrictingMongoTemplate</p>

<p>import com.mongodb.<em>;
import org.slf4j.</em>;
import org.springframework.data.authentication.UserCredentials;
import org.springframework.data.mongodb.MongoDbFactory;
import org.springframework.data.mongodb.core.*;</p>

<p>import java.util.*;</p>

<p>public class RestrictingMongoTemplate extends MongoTemplate {</p>

<pre><code>private List&lt;? extends QueryModifier&gt; queryModifiers = new ArrayList&lt;&gt;();

/** omitting constructors */

public void setQueryModifiers(List&lt;? extends QueryModifier&gt; queryModifiers) {
    this.queryModifiers = queryModifiers;
}

@Override
public void executeQuery(Query query, String collectionName, DocumentCallbackHandler dch) {
    for (QueryModifier queryModifier : queryModifiers) {
        query = queryModifier.modify(query, collectionName);
    }

    super.executeQuery(query, collectionName, dch);
</code></pre>

<p>   }</p>

<pre><code>public &lt;T&gt; List&lt;T&gt; find(Query query, Class&lt;T&gt; entityClass, String collectionName) {
    int limit = query.getLimit();

    for (QueryModifier queryModifier : queryModifiers) {
        query = queryModifier.modify(query, collectionName);
    }

    query.limit(limit);

    return super.find(query, entityClass, collectionName);
}
</code></pre>

<p>}</p>

<p>```</p>

<p>Let&rsquo;s implement simple QueryModifier which will add restriction to return only active documents from Mongo:</p>

<p>``` java Sample implementation of QueryModifier interface</p>

<p>import model.Document;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;</p>

<p>public class ActiveQueryModifier implements QueryModifier {</p>

<pre><code>@Override
public Query modify(Query query, String collectionName) {
    if (Document.COLLECTION_NAME.equals(collectionName)) {
        return query.addCriteria(Criteria.where("active").is(Boolean.TRUE));
    }
    return query;
}
</code></pre>

<p>}</p>

<p>```</p>

<p>Next step is to provide our custom implementation of <code>MongoTemplate</code> to Spring Data:</p>

<p>``` java Example of Spring Configuration</p>

<p>@PropertySource(&ldquo;classpath:application.properties&rdquo;)
@EnableMongoRepositories(</p>

<pre><code>    basePackages = "model",
    mongoTemplateRef = "mongoTemplate")
</code></pre>

<p>@Configuration(&ldquo;configuration&rdquo;)
public class ServiceConfiguration extends AbstractMongoConfiguration {</p>

<pre><code>@Value("${mongo.db.name}")
protected String mongoDatabaseName;

@Override
protected String getDatabaseName() {
    return mongoDatabaseName;
}

@Override
public RestrictingMongoTemplate mongoTemplate() throws UnknownHostException {
    RestrictingMongoTemplate mongoTemplate =
            new RestrictingMongoTemplate(mongo(), mongoDatabaseName);

    mongoTemplate.setQueryModifiers(Arrays.asList(
            new ActiveQueryModifier()
    ));

    return mongoTemplate;    
}

// creation of Mongo bean omitted.
</code></pre>

<p>}</p>

<p>```</p>

<p>That&rsquo;s all for today. If you have any questions &ndash; <a href="https://plus.google.com/112372998073079463630/posts">Ask me on Google+</a></p>
]]></content>
  </entry>
  
</feed>
