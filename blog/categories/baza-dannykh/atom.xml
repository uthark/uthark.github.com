<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: база данных | Блог о разработке ПО]]></title>
  <link href="http://uthark.github.com/blog/categories/baza-dannykh/atom.xml" rel="self"/>
  <link href="http://uthark.github.com/"/>
  <updated>2013-06-29T23:40:55-04:00</updated>
  <id>http://uthark.github.com/</id>
  <author>
    <name><![CDATA[Oleg Atamanenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Список для проверки при оптимизации Grails приложений]]></title>
    <link href="http://uthark.github.com/blog/2010/02/06/grails/"/>
    <updated>2010-02-06T12:31:00-05:00</updated>
    <id>http://uthark.github.com/blog/2010/02/06/grails</id>
    <content type="html"><![CDATA[<div class='post'>
Выкладываю ниже список задач, которые нужно/можно выполнить для оптимизации приложения, написанного на Grails, может кому пригодится.<br />
<h4>Тестирование проведённых оптимизаций </h4>Первым делом необходимо разработать критерии проверки, которые позволят оценить эффективность проведённых оптимизаций.<br />
<ol><li>Установить <a href="http://code.google.com/p/javamelody/">Java Melody</a> <a href="http://www.grails.org/plugin/grails-melody">плагин</a> для Grails для проведения анализа. <br />
</li>
<li>Разработать скрипты для проведения нагрузочного тестирования.<br />
</li>
<li>Прогнать скрипты.<br />
</li>
<li>Проанализировать результаты Java Melody, выявить узкие места, произвести нужные оптимизации.</li>
</ol><h4>Общие оптимизации </h4>Очень часто обновление до последней версии используемых библиотек попутно улучшает производительность.<br />
<ol><li>Обновить Java до последней версии<br />
</li>
<li>Обновить Groovy до последней версии.<br />
</li>
<li>Обновить Grails до последней версии.<br />
</li>
<li>Обновить jQuery до последней версии.<br />
</li>
<li>Оптимизировать настройки виртуальной машины Java (например, -server -Xmx270m -Xms270m -XX:MaxPermSize=80m -Xverify:none -XX:+UseParallelGC -XX:+UseParallelOldGC -XX:+UseAdaptiveSizePolicy -XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThreshold=31 -XX:+AggressiveOpts)<br />
a. http://java.sun.com/javase/technologies/hotspot/gc/gc_tuning_6.html<br />
Вообще, по оптимизации JVM написаны целые книги, так что не буду здесь останавливаться.<br />
</li>
</ol><h4>Оптимизация клиентской части </h4><ol><li>Настроить <a href="http://tomcat.apache.org/tomcat-5.5-doc/config/context.html">кэширование статических ресурсов</a> в Томкате.<br />
</li>
<li>Настроить <a href="http://tomcat.apache.org/tomcat-5.5-doc/config/http.html">сжатие статических ресурсов</a> в Томкате.<br />
</li>
<li>(поставить прокси на nginx для кэширования статических ресурсов ?)<br />
</li>
<li>Установить плагины для Firebug, которые оценят производительность клиентской части.<br />
<ul><li><a href="http://code.google.com/speed/page-speed">PageSpeed</a> </li>
<li><a href="http://developer.yahoo.com/yslow/">YSlow</a> </li>
</ul></li>
<li>Проанализировать страницы веб-сайта с их помощью<br />
</li>
<li>Провести предлагаемые оптимизации.<br />
</li>
</ol><h4>Оптимизация клиентской части приложений, написанных на Grails </h4><ol><li>Установить плагин <a href="http://www.grails.org/plugin/ui-performance">UI Performance</a><br />
</li>
<li>Провести оптимизацию с использованием плагина UI Performance <br />
</li>
</ol><h4>Оптимизация базы данных </h4><ol><li>Оптимизировать производительность сервера базы данных (SQL Server) <br />
a. http://www.sql-server-performance.com/tips/all_main.aspx <br />
a. http://msdn.microsoft.com/en-us/library/ms998577.aspx<br />
</li>
<li>Проверить наличие индексов в базе данных, добавить необходимые<br />
</li>
<li>Найти неоптимальные запросы в БД, оптимизировать</li>
</ol><h4>Оптимизация работы с базой данных </h4><ol><li>Обновить версию JDBC-драйвера<br />
</li>
<li>Настроить кэширование в Hibernate.<br />
Ресурсов в сети предостаточно, навскидку <a href="http://docs.jboss.org/hibernate/core/3.3/reference/en/html/performance.html">вот</a> <a href="http://www.devx.com/dbzone/Article/29685/1954"> парочка</a>.<br />
</li>
</ol><h4>Оптимизация серверной части приложения </h4><ol><li>Произвести профилирование приложения (использовать Visual VM, YJP Profiler), найти узкие места и оптимизировать их.</li>
</ol><h4>Оптимизация серверной части приложения (опционально) </h4><ol><li>Установить плагин <a href="http://www.grails.org/plugin/perf4j">Perf4J</a> для грэйлза <br />
</li>
<li>Добавить необходимые счётчики в код<br />
</li>
<li>Прогнать нагрузочные тесты, найти узкие места, оптимизировать.</li>
</ol><h4>Заключение</h4>В целом, в данном списке нет ничего нового, это всего лишь компиляция публично доступных материалов. Тем не менее, решил это опубликовать, чтобы сэкономить время другим.</div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>uthark</div>
<div class='content'>
@serger По вашей ссылке достаточно странное сравнение.<br />Остались такие вопросы:<br />1. Какие были настройки JVM?<br />2. Почему не учитывается, что при работе на сервере поведение может изменяться (ограничения по количеству потоков, например)<br />3. Не сказано, сколько раз прогонялся каждый тест.<br />4. Сколько было памяти выделено тестам.<br /><br />У меня для groovy вот такой результат получился:<br />Using 100000 iterations.<br />7.531 sec. - +/- 0.1 секунды, прогонял 10 раз.<br /><br />Тесты гонял на домашней машинке (AMD64 4200, 4GB RAM, Java 1.6.0.16, Groovy 1.6.3. OS: Ubuntu 9.10).</div>
</div>
<div class='comment'>
<div class='author'>serger</div>
<div class='content'>
и ещё:<br />http://blog.gramant.ru/2009/10/15/%D0%B0%D0%B1%D1%81%D0%BE%D0%BB%D1%8E%D1%82%D0%BD%D0%BE-%D0%B1%D0%B5%D1%81%D0%BF%D0%BE%D0%BB%D0%B5%D0%B7%D0%BD%D1%8B%D0%B9-%D1%82%D0%B5%D1%81%D1%82-%E2%84%961-php-vs-groovy/</div>
</div>
<div class='comment'>
<div class='author'>uthark</div>
<div class='content'>
@serger Да, про груви++ я знаю. Но ведь это костыль. :)</div>
</div>
<div class='comment'>
<div class='author'>serger</div>
<div class='content'>
Да, тяжко, но подвижки есть...<br />http://stronglytypedblog.blogspot.com/2010/02/java-vs-scala-vs-groovy-vs-groovy.html<br />http://stronglytypedblog.blogspot.com/2010/02/groovy-performance-now-were-talkin.html</div>
</div>
<div class='comment'>
<div class='author'>uthark</div>
<div class='content'>
@serger Вообще сравнения производительности показывают, что groovy, на котором написан grails в десятки раз медленнее явы [1], [2]. Но зато добавляются бенефиты динамического языка. Вообще я за Roo, но его ещё рано пускать в production.<br /><br /> [1] http://www.codecommit.com/blog/java/groovys-performance-is-not-subjective<br /> [2] http://groovy.dzone.com/news/groovy-vs-java-performance-jav</div>
</div>
<div class='comment'>
<div class='author'>serger</div>
<div class='content'>
А на сколько, по Вашему, медленнее Grails, чем допустим, spring MVC, (если знакомы Roo). И на чём конкретно падает производительность?</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Вложенные транзакции в базах данных]]></title>
    <link href="http://uthark.github.com/blog/2010/02/04/blog-post/"/>
    <updated>2010-02-04T14:20:00-05:00</updated>
    <id>http://uthark.github.com/blog/2010/02/04/blog-post</id>
    <content type="html"><![CDATA[<div class='post'>
Summary: Некоторые особенности вложенных транзакций.<br />
<br />
Иногда бывает так, что при обработке запроса необходимо открыть ещё одну транзакцию в рамках текущей транзакции. Это называется вложенной транзакцией. <br />
<br />
Очень многие базы данных не поддерживают вложенные транзакции вообще, например, MySQL и Oracle. А те, что поддерживают, делают это на минимальном уровне, например, Sybase поддерживает только псевдовложенные транзакции.<br />
<br />
Вложенные транзакции могут быть следующих видов:<br />
<br />
<ol><li>Псевдо-вложенные транзакции</li>
<li>Вложенная субтранзакция</li>
<li>Вложенная независимая транзакция</li>
</ol><br />
<h3>Псевдовложенные транзакции</h3><br />
Этот тип транзакций поддерживается базой данных Sybase.<br />
Псевдо-вложенные транзакции позволяют использовать транзакции одна внутри другой, при этом не реализуя механизм вложенных транзакций. Суть состоит в том, что имеется счётчик уровня вложенности транзакций, который увеличивается на 1 при каждом вызове <tt>BEGIN TRANSACTION</tt> и уменьшается на 1 при каждом вызове <tt>COMMIT</tt>. Когда счётчик становится равным 0 происходит коммит всех произведённых изменений.<br />
<br />
Если во время проведения транзакции происходит ошибка, то вызывается <tt>ROLLBACK</tt>, но здесь есть загвоздка - что делать с последующими вызовами <tt>BEGIN TRANSACTION</tt>  и <tt>COMMIT</tt>. Оптимальным решением является кидание исключения, но это необходимо отслеживать и учитывать на стадии проектирования и реализации, чтобы не возникло неприятных ситуаций при эксплуатации.<br />
<br />
Псевдовложенные транзакции являются самым простым способом реализации вложенных транзакций.<br />
<br />
Пример псевдотранзакции для базы данных Sybase:<br />
<pre class="brush: sql">begin tran
    select @@trancount
    /* @@trancount = 1 */
    begin tran
        select @@trancount
        /* @@trancount = 2 */
        begin tran
            select @@trancount
            /* @@trancount = 3 */
        commit tran
    commit tran
commit tran
select @@trancount
/* @@ trancount = 0 */
</pre><br />
<h3>Вложенная субтранзакция</h3><br />
Данный вид вложенных транзакций решает проблему с обработкой ошибок при <tt>ROLLBACK</tt>. <br />
При коммите вложенной транзакции происходит коммит, но он не обладает свойством <tt>Durability</tt> - окончательный результат зависит от результата внешней транзакции - если внешняя транзакция заканчивается успешно, то и результат внутренней транзакции также фиксируется. Если же при фиксации изменений внешней транзакции происходит ошибка, то внутренняя транзакция также откатывается. Кроме того, необходимо обратить внимание на то, что если внутренняя транзакция заканчивается неуспешно, то внешняя транзакция может закончиться успешно, если не выкинуть исключение наружу. Таким образом, для данного вида вложенных транзакций необходимо выкидывать исключение наружу, для того, чтобы прервать и откатить внешнюю транзакцию в случае ошибки.<br />
<br />
<h3>Вложенная независимая транзакция</h3>Особенность данного вида вложенных транзакций заключается в том, что после создания вложенной транзакции она является полностью независимой от транзакции, внутри которой она была создана. Её результаты фиксируются и откатываются независимо от внешней транзакции.<br />
<br />
<h3>Вложенные транзакции и принципы ACID</h3>Вложенные транзакции выглядят достаточно подозрительными в том смысле, что они могут нарушать принципы ACID: <br />
1. Вложенная субтранзакция может нарушать принцип <tt>Durability</tt>, так как уже зафиксированные изменения могут откатиться в случае отката внешней транзакции.<br />
2. Вложенная независимая транзакция может нарушать принципы <tt>Atomicity</tt> и <tt>Consistency</tt> при возникновении ошибок во внешней или вложенной транзакции.<br />
<br />
Подробнее о принципах <abbr title="Atomicity, Consistency, Isolation, Durability">ACID</abbr> можно прочитать в <a href="http://atamanenko.blogspot.com/2009/04/blog-post_24.html">этом посте</a>.<br />
<br />
<h3>Заключение</h3>Я считаю, что следует избегать ситуаций, когда нужны вложенные транзакции. Кроме того, спецификация Java EE <a href="http://java.sun.com/javaee/6/docs/api/javax/ejb/TransactionAttributeType.html">не поддерживает</a> вложенные транзакции.</div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>uthark</div>
<div class='content'>
@karri На мой взгляд лучше всё же использовать официальную документацию в таких случаях. :) <a href="http://download.oracle.com/docs/html/B10813_01/toc.htm" rel="nofollow">Oracle® Database Quick Installation Guide 10g Release 1 (10.1) for Linux x86</a><br /><br />И ставить, всё же, лучше на поддерживаемый Ораклом дистрибутив, например на Redhat.</div>
</div>
<div class='comment'>
<div class='author'>karri</div>
<div class='content'>
Вкратце о себе: в прошлом году окончила университет, пол года работаю тестировщиком (тестирую web-приложения и оракловые формсы для биллнговых систем сотовых операторов). Значения SQl начальные: пишу частые несложные запросы для выборки необходимых тестовых данных, заполняю/удаляю/обновляю данные. Иногда запускаю на низком уровне пакетные методы для проверки работоспособности api-методов. Понимаю более сложные запросы (но правда требуется время, чтобы подумать :)). <br /><br />Есть большое желания поставить, даже ни сколько поставить, а сколько грамотно настроить (!) СУБД Oracle под linux. Linux стоит (являюсь пользователем, не администрирую, к своему стыду), осталось Oracle поставить :) <br /><br />Понимаю, что задача для меня сложная, но оч хочется :) При поверхностном поиске наткнулась на статью http://www.interface.ru/home.asp?artId=17461<br />Что вы об этом думаете? С чего бы вы посоветовали мне начать?</div>
</div>
<div class='comment'>
<div class='author'>uthark</div>
<div class='content'>
@karri Извините, я не нарочно. :)<br />С Oracle тоже работаю. Проконсультировать могу попробовать. :)</div>
</div>
<div class='comment'>
<div class='author'>karri</div>
<div class='content'>
А почему karrY?<br /><br />А вы с Oracle работаете ? Проконсультироваться с вами можно?</div>
</div>
<div class='comment'>
<div class='author'>karri</div>
<div class='content'>
This comment has been removed by the author.</div>
</div>
<div class='comment'>
<div class='author'>uthark</div>
<div class='content'>
@karry Да, конечно. Интересно. )</div>
</div>
<div class='comment'>
<div class='author'>karri</div>
<div class='content'>
Ух ты :) Класс! Нравится?</div>
</div>
<div class='comment'>
<div class='author'>uthark</div>
<div class='content'>
@karry Начинал работу Java-разработчиком, сейчас архитектором работаю.</div>
</div>
<div class='comment'>
<div class='author'>karri</div>
<div class='content'>
А вы на java пишете?</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Двунаправленная ссылочная целостность]]></title>
    <link href="http://uthark.github.com/blog/2009/07/07/blog-post/"/>
    <updated>2009-07-07T11:11:00-04:00</updated>
    <id>http://uthark.github.com/blog/2009/07/07/blog-post</id>
    <content type="html"><![CDATA[<div class='post'>
Здравствуйте.<br />
<br />
Я считаю, что разработчику всегда стоит иметь представление о том, как работают низлежащие абстракции. Хотя бы потому, что часто <a href="http://c2.com/cgi/wiki?LeakyAbstraction">абстракции</a> <a href="http://en.wikipedia.org/wiki/Leaky_abstraction">бывают</a> <a href="http://www.joelonsoftware.com/articles/LeakyAbstractions.html">протекающими</a>.<br />
<br />
А веду я это к тому, что когда фреймворк вываливает стектрейс с несколькими вложенными (и, часто, для непосвященных непонятными) исключениями, то бывает непонятно, что с этим делать, особенно, если не знаешь, как реализована абстракция.<br />
<br />
Иногда бывает нужно хранить двунаправленные связи между таблицами. Например, есть игрок и есть его статистика и нужно, чтобы каждая из сущностей знала про другую.<br />
<br />
Вопрос - каким образом вставлять в базу данных такие сущности?<br />
<br />
При вставке в таблицу в Player нам нужно уже иметь запись в таблице Statistics, а для вставки в таблицу Statistics нужно знать идентификатор игрока, к которому относится эта запись.<br />
<br />
Выглядит замкнутым кругом, но решение есть.<br />
<p>Во-первых, вставки в обе таблицы должны происходить в рамках одной транзакции (как я <a href="http://www.blogger.com/2009/04/blog-post_24.html">уже писал</a>, транзакция обеспечивает перевод базы данных из одного непротиворечащего состояния в другое непротиворечащее состояние).<br />
</p><br />
К сожалению, этого недостаточно:<br />
<br />
<pre class="brush: sql">begin transaction;

INSERT INTO "Player"  VALUES (10, 20);
INSERT INTO "Statistics"  VALUES (20, 10);

commit;
</pre><br />
<br />
выдаёт следующую ошибку:<br />
<br />
<pre class="brush: plain">ERROR: insert or update on table "Player" violates foreign key constraint "statisticsId"
SQL state: 23503
Detail: Key (statisticsId)=(20) is not present in table "Statistics".
</pre><br />
<br />
И снова кажется, что замкнутый круг не разорвать.<br />
<br />
Но решение всё же есть.<br />
Многие базы данных позволяют нарушать консистентность базы данных внутри транзакции. В данном случае можно "попросить" базу данных отложить проверку ссылочной целостности. На примере PostgreSQL рассмотрим, как это работает.<br />
<br />
<h3>PostgreSQL</h3><br />
<pre class="brush: sql">begin transaction;

set constraints all deferred; -- 1

INSERT INTO "Player"  VALUES (10, 20);
INSERT INTO "Statistics"  VALUES (20, 10);

set constraints all immediate; -- 2

commit; -- 3
</pre><br />
<br />
1 - Сделать все ограничения отложенными. Ограничения будут проверены в момент проведения фиксации транзакции (в строке 3)<br />
2 - Явно делаем все ограничения немедленными. В данном примере это необязательно, так как в 3) они всё равно будут проверены.<br />
<br />
После выполнения данного кода получаем:<br />
<pre class="brush: plain">Query returned successfully with no result in 24 ms.
</pre><br />
<br />
Это уже полностью рабочий пример, чтобы это заработало нужно явно сделать ограничения отложенными - они должны быть объявлены как DEFERRED. Официальная документация к PostgreSQL гласит:<br />
<blockquote>Upon creation, a constraint is given one of three characteristics: DEFERRABLE INITIALLY DEFERRED, DEFERRABLE INITIALLY IMMEDIATE, or NOT DEFERRABLE. The third class is always IMMEDIATE and is not affected by the SET CONSTRAINTS command. The first two classes start every transaction in the indicated mode, but their behavior can be changed within a transaction by SET CONSTRAINTS.</blockquote><br />
<br />
Так что необходимо также модифицировать объявления ограничений:<br />
<pre class="brush: sql">ALTER TABLE "Player"
ADD CONSTRAINT "statisticsId" FOREIGN KEY ("statisticsId")
REFERENCES "Statistics" ("statisticsId") MATCH SIMPLE
ON UPDATE NO ACTION ON DELETE NO ACTION DEFERRABLE INITIALLY IMMEDIATE;

</pre><br />
<br />
Данный пример был приведён для PostgreSQL.<br />
<br />
Для других баз данных решения следующие:<br />
<h3>Sybase</h3><br />
В Sybase есть переменная <a href="http://manuals.sybase.com/onlinebooks/group-sasarc/awg0600e/dbugen6/@Generic__BookTextView/26075;hf=0;pt=25811">WAIT_FOR_COMMIT</a>, которая управляет поведением проверки ограничений. По умолчанию она отключена. Кроме того, это поведение можно переопределить при объявлении можно указывать CHECK ON COMMIT. Подробнее можно посмотреть в <a href="http://manuals.sybase.com/onlinebooks/group-pbarc/conn5/sqlug/@Generic__BookTextView/39397%3Bpt=39951">официальной документации</a>.<br />
<br />
<h3>Oracle</h3><br />
Также, как и в PostgreSQL:<br />
<blockquote>You can define constraints as either deferrable or not deferrable, and either initially deferred or initially immediate. These attributes can be different for each constraint. You specify them with keywords in the CONSTRAINT clause:<br />
DEFERRABLE or NOT DEFERRABLE<br />
INITIALLY DEFERRED or INITIALLY IMMEDIATE<br />
<br />
Constraints can be added, dropped, enabled, disabled, or validated. You can also modify a constraint's attributes.<br />
</blockquote><br />
Подробнее в <a href="http://download.oracle.com/docs/cd/B10501_01/server.920/a96524/c22integ.htm#4666">официльной документации</a>.<br />
<br />
<h3>mySQL</h3><br />
К сожалению, mySQL не имеет возможности отложенной проверки ограничении, о чём в документации и сказано:<br />
<blockquote><em>Deviation from SQL standards</em>: Like MySQL in general, in an SQL statement that inserts, deletes, or updates many rows, InnoDB checks UNIQUE and FOREIGN KEY constraints row-by-row. According to the SQL standard, the default behavior should be deferred checking. That is, constraints are only checked after the entire SQL statement has been processed. Until InnoDB implements deferred constraint checking, some things will be impossible, such as deleting a record that refers to itself via a foreign key.</blockquote><br />
<br />
Но это не конец света, так как можно отключить проверку внешних ключей:<br />
<pre class="brush: sql">SET foreign_key_checks = 0;
-- code goes here
SET foreign_key_checks = 1;
</pre><br />
<br />
Чем эта информация может быть полезна для разработчика? Например, в случае, если ошибки и недоработки Hibernate покажут себя в виде стектрейса в логе(например, <a href="http://opensource.atlassian.com/projects/hibernate/browse/HHH-2248">HHH-2248</a>), то разработчик будет понимать причину ошибки и то, как реализовать work-around.</div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Oleg Atamanenko</div>
<div class='content'>
Очень рад, что вам эта статья была полезной.</div>
</div>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
спасибо, а я понял что такое двунаправленные связи</div>
</div>
<div class='comment'>
<div class='author'>Safarov</div>
<div class='content'>
Спасибо за вашу статью. Для меня она объяснила как можно повысть целостность базы.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Транзакции в реляционных базах данных]]></title>
    <link href="http://uthark.github.com/blog/2009/04/24/blog-post_24/"/>
    <updated>2009-04-24T10:49:00-04:00</updated>
    <id>http://uthark.github.com/blog/2009/04/24/blog-post_24</id>
    <content type="html"><![CDATA[<div class='post'>
<style type="text/css">.nobr br { display: none }</style>

При работе в многопользовательском окружении может возникнуть ситуация, когда разные пользователи или системы обновляют одни и те же данные. Это может привести к ситуации, когда один из пользователей изменит данные, которые уже изменял другой пользователь и приведёт либо к потере данных, либо к переводу данных в неконсистентное состояние.
Для решения этой проблемы были придуманы транзакции. Целью транзакции является создание абстракции того, что каждый пользователь - единственный в системе.

<h3>Характеристики транзакций</h3>
В конце 1970-х <a href="http://en.wikipedia.org/wiki/Jim_Gray_%28computer_scientist%29">Джим Грей</a> выделил следующие характеристики транзакций:
<ul><li>Атомарность (<span style="font-weight: bold;">A</span>tomicity)
</li><li>Непротиворечивость (<span style="font-weight: bold;">C</span>onsistency)
</li><li>Изолированность (<span style="font-weight: bold;">I</span>solation)
</li><li>Долговечность (<span style="font-weight: bold;">D</span>urability)
</li></ul><span style="font-weight: bold;">Атомарность </span>означает, что все действия, производимые в рамках одной транзакции атомарны. Если транзакция заканчивается не успешно, то все изменения, сделанный в рамках этой транзакции откатываются назад. Если транзакция заканчивается успешно, то все её изменения сохраняются.

<span style="font-weight: bold;">Непротиворечивость </span>означает, что транзакция переводит базу данных из одного непротиворечивого состояния в другое непротиворечивое состояние. При этом, внутри транзакции база данных <span style="font-style: italic;">может</span> находиться в противоречивом состоянии.

<span style="font-weight: bold;">Изолированность</span> означает, что во время работы одной транзакции ей <a href="http://www.blogger.com/post-edit.g?blogID=8483146613266894707&amp;postID=831038356059470359#transaction_isolation_levels">недоступны изменения</a>, происходящие в другой транзакции.

Под <span style="font-weight: bold;">долговечностью</span> подразумевают, что после окончания транзакции все изменения, сделанные транзакцией фиксируется навсегда, то есть, если происходит программно-аппаратный сбой, то после восстановления системы в рабочее состояние нет потерянных изменений.

<a name="transaction_isolation_levels">
<h3>Уровни изоляции транзакций</h3></a>
При параллельном выполнении нескольких транзакций могут возникнуть следующие проблемы:
<ul><li>Потерянное обновление</li><li>"Грязное" чтение</li><li>Неповторяющееся чтение</li><li>Фантомная вставка</li></ul><span style="font-weight: bold;">Потерянное обновление</span> может возникнуть в ситуации, когда две транзакции обновляют одни и те же данные.

<span style="font-weight: bold;">"Грязное" чтение</span> возникает, когда одна транзакция видит несохранённые изменения, сделанные другой транзакцией.

<span style="font-weight: bold;">Неповторяющееся чтение</span> - это ситуация, когда в рамках одной транзакции один и тот же запрос на выборку возвращает разные результаты.

<span style="font-weight: bold;">Фантомная вставка</span> - ситуация, похожая на неповторяющее чтение - заключается в том, что результаты одной и той же выборки в рамках одной транзакции имеют разное количество возвращаемых строк.

<a href="http://www.contrib.andrew.cmu.edu/%7Eshadow/sql/sql1992.txt">Стандарт SQL-92</a> определяет следующие уровни изоляции транзакции:
<ol><li>READ_UNCOMMITED</li><li>READ_COMMITED</li><li>REPEATABLE_READ</li><li>SERIALIZABLE
</li></ol><span style="font-weight: bold;">READ_UNCOMMITED</span> - позволяет другим транзакциям видеть несохранённые изменения

<span style="font-weight: bold;">READ_COMMITED</span> - транзакция во время выполенения видит только зафиксированные изменения. В большинстве баз данных это уровень изоляции по умолчанию.

<span style="font-weight: bold;">REPEATABLE_READ</span> - данный уровень изоляции решает проблему неповторяющего чтения.

<span style="font-weight: bold;">SERIALIZABLE</span> - данный уровень изоляции выполняет все транзакции последовательно. Это самый надёжный уровень изоляции, но, при этом, и наименее производительный.

Каждый уровень решает часть вышеперечисленных проблем.

<div class="nobr">
<table>
<tbody><tr>
<th>Проблема

 Уровень изоляции</th>
<th>Потерянное обновление</th>
<th>Грязное чтение</th>
<th>Неповторяющееся чтение</th>
<th>Фантомная вставка</th>
</tr><tr>
<td>READ_UNCOMMITED</td>
<td>невозможно</td>
<td>возможно</td>
<td>возможно</td>
<td>возможна</td>
</tr><tr>
<td>READ_COMMITED</td>
<td>невозможно</td>
<td>невозможно</td>
<td>возможно</td>
<td>возможна</td>
</tr>
<tr>
<td>REPEATABLE_READ</td>
<td>невозможно</td>
<td>невозможно</td>
<td>невозможно</td>
<td>возможна</td>
</tr>
<tr>
<td>SERIALIZABLE</td>
<td>невозможно</td>
<td>невозможно</td>
<td>невозможно</td>
<td>невозможна</td>
</tr></tbody></table>
</div></div>

]]></content>
  </entry>
  
</feed>
