<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Development | Software Development and related activities]]></title>
  <link href="http://uthark.github.io/blog/categories/development/atom.xml" rel="self"/>
  <link href="http://uthark.github.io/"/>
  <updated>2017-10-12T19:01:44-04:00</updated>
  <id>http://uthark.github.io/</id>
  <author>
    <name><![CDATA[Oleg Atamanenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Unitils ReflectionAssert]]></title>
    <link href="http://uthark.github.io/blog/2014/04/16/using-unitils-reflectionassert/"/>
    <updated>2014-04-16T00:10:10-04:00</updated>
    <id>http://uthark.github.io/blog/2014/04/16/using-unitils-reflectionassert</id>
    <content type="html"><![CDATA[<p>Often it is needed to compare two different instances of the class inside test. I.e. we save object into database, then fetch it back from db and we want to be sure if nothing was lost during saving/reading.</p>

<p>In order to make such assertions more easier and maintainable one can use great Unitils library which has useful class <a href="http://www.unitils.org/tutorial-reflectionassert.html">ReflectionAssert</a></p>

<p>First, update parent&rsquo;s <code>pom.xml</code>:</p>

<p>``` xml pom.xml changes in parent module
<properties></p>

<pre><code>&lt;unitils.version&gt;3.4&lt;/unitils.version&gt;
</code></pre>

<p></properties>
<dependency></p>

<pre><code>&lt;groupId&gt;org.unitils&lt;/groupId&gt;
&lt;artifactId&gt;unitils-core&lt;/artifactId&gt;
&lt;version&gt;${unitils.version}&lt;/version&gt;
&lt;scope&gt;test&lt;/scope&gt;
</code></pre>

<p></dependency></p>

<p>```</p>

<p>Then add dependency to the child module:</p>

<p>``` xml pom.xml changes in child module</p>

<p><dependency></p>

<pre><code>&lt;groupId&gt;org.unitils&lt;/groupId&gt;
&lt;artifactId&gt;unitils-core&lt;/artifactId&gt;
</code></pre>

<p></dependency></p>

<p>```</p>

<p>Usage is very simple:
Add static import to the class.</p>

<p>``` java</p>

<p>import static org.unitils.reflectionassert.ReflectionAssert.assertReflectionEquals;</p>

<p>```</p>

<p>and use it instead of regular JUnit assert:</p>

<p>``` java</p>

<pre><code>assertReflectionEquals(expected, actual);
</code></pre>

<p>```</p>

<p>It is possible to pass reflection comparator modes as optional parameters to the above method.</p>

<p>Be ware that this method is not very useful if you want to compare objects which has floating point or double parameters &ndash; ReflectionAssert compares <code>double</code> and <code>float</code> values using <code>==</code>, so it is not very useful. It is not possible to pass epsilon for comparison.</p>

<p>``` java excerpt from org.unitils.reflectionassert.comparator.impl.LenientNumberComparator#compare</p>

<p>// &hellip;
Double leftDouble = getDoubleValue(left);
Double rightDouble = getDoubleValue(right);
if (!leftDouble.equals(rightDouble)) {</p>

<pre><code>return new Difference(differenceMessage, left, right);
</code></pre>

<p>}
// &hellip;</p>

<p>```</p>

<p>If you need to compare double values in JUnit assertions then it is better to use <a href="https://code.google.com/p/hamcrest/">hamcrest library</a>.</p>

<p>``` java</p>

<p>import static org.hamcrest.number.IsCloseTo.closeTo;
import static org.junit.Assert.assertThat;</p>

<p>// in @Test method:
assertThat(actual.getFederalIncomeTax(), closeTo(expected.getFederalIncomeTax(), EPSILON))</p>

<p>```</p>

<p>Happy hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using AssertJ]]></title>
    <link href="http://uthark.github.io/blog/2014/04/15/using-assertj/"/>
    <updated>2014-04-15T23:37:49-04:00</updated>
    <id>http://uthark.github.io/blog/2014/04/15/using-assertj</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/joel-costigliola/assertj-core">AssertJ</a> is a library which provides fluent strongly-typed assertions to use in unit tests.</p>

<p>Example of assertions written with <code>AssertJ</code>:</p>

<p>``` java</p>

<p>import io.github.uthark.blog.assertj.Assertions.assertThat;</p>

<p>// &hellip; within @Test
User result = userDao.findByLogin(&ldquo;username&rdquo;);
assertThat(result).</p>

<pre><code>isNotNull().
isActive().
hasLogin("username");
</code></pre>

<p>```</p>

<p>As you can see assertions look much more readable.
The integration of assertj into Maven project is very easy:</p>

<ol>
<li>Update pom.xml in parent module</li>
</ol>


<p>``` xml pom.xml changes in parent module.</p>

<p><properties></p>

<pre><code>&lt;assertj-core.version&gt;1.6.0&lt;/assertj-core.version&gt;
&lt;assertj-assertions-generator-maven-plugin.version&gt;1.2.0&lt;/assertj-assertions-generator-maven-plugin.version&gt;
</code></pre>

<p></properties></p>

<p><dependencyManagement></p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.assertj&lt;/groupId&gt;
    &lt;artifactId&gt;assertj-core&lt;/artifactId&gt;
    &lt;version&gt;${assertj-core.version}&lt;/version&gt;
    &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
</code></pre>

<p></dependencyManagement></p>

<p><pluginManagement></p>

<pre><code>&lt;plugin&gt;
    &lt;groupId&gt;org.assertj&lt;/groupId&gt;
    &lt;artifactId&gt;assertj-assertions-generator-maven-plugin&lt;/artifactId&gt;
    &lt;version&gt;${assertj-assertions-generator-maven-plugin.version}&lt;/version&gt;
    &lt;executions&gt;
        &lt;execution&gt;
            &lt;id&gt;generate-assertions&lt;/id&gt;
            &lt;phase&gt;generate-test-sources&lt;/phase&gt;
            &lt;goals&gt;
                &lt;goal&gt;generate-assertions&lt;/goal&gt;
            &lt;/goals&gt;
        &lt;/execution&gt;
    &lt;/executions&gt;
&lt;/plugin&gt;
</code></pre>

<p></pluginManagement></p>

<p>```</p>

<ol>
<li>Update pom.xml in child module</li>
</ol>


<p>``` xml Changes in child module.</p>

<p><dependencies></p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.assertj&lt;/groupId&gt;
    &lt;artifactId&gt;assertj-core&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>

<p></dependencies>
<build></p>

<pre><code>&lt;plugins&gt;
    &lt;plugin&gt;
        &lt;groupId&gt;org.assertj&lt;/groupId&gt;
        &lt;artifactId&gt;assertj-assertions-generator-maven-plugin&lt;/artifactId&gt;
        &lt;configuration&gt;
            &lt;!-- you can define collection packages: --&gt;
            &lt;packages&gt;
                &lt;param&gt;io.github.uthark.blog.assertj&lt;/param&gt;
            &lt;/packages&gt;

            &lt;!-- Or specify classes one by one. --&gt;
            &lt;classes&gt;
                &lt;param&gt;io.github.uthark.blog.assertj.User&lt;/param&gt;
            &lt;/classes&gt;
        &lt;/configuration&gt;
    &lt;/plugin&gt;
&lt;/plugins&gt;
</code></pre>

<p></build></p>

<p>```</p>

<p>After this changes it is possible to generate assertions for the classes you want test:</p>

<p>``` sh</p>

<p>mvn assertj:generate-assertions</p>

<p>```</p>

<p>By default assertj will generate assertion classes in <code>target/generated-test-sources/assertj-assertions/</code>, it is possible to override this behaviour by passing configuration element <code>targetDir</code> to plugin.</p>

<p>Additonal documentation for Maven plugin can be <a href="http://joel-costigliola.github.io/assertj/assertj-assertions-generator-maven-plugin.html">found here</a></p>

<p>Happy hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Initializing Mockito @Mocks With JUnit @Rule]]></title>
    <link href="http://uthark.github.io/blog/2014/03/28/initializing-at-mocks-with-junit-at-rule/"/>
    <updated>2014-03-28T13:24:45-04:00</updated>
    <id>http://uthark.github.io/blog/2014/03/28/initializing-at-mocks-with-junit-at-rule</id>
    <content type="html"><![CDATA[<p>In this post I will show how one can implement custom JUnit <a href="http://junit-team.github.io/junit/javadoc/4.11/org/junit/Rule.html">@Rule</a>.</p>

<p>As an example let&rsquo;s take <a href="https://code.google.com/p/mockito/">Mockito</a> and implement custom rule which will initialize Mocks in  test class.</p>

<p>By default, Mockito provides the following methods of mock initialization:</p>

<ol>
<li>Using <a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#mock(java.lang.Class)">Mockito.mock</a></li>
</ol>


<p>``` java Initialize mocks with Mockito.mock</p>

<p>public void FooTest {</p>

<pre><code>private Foo foo;

@Before
public void setUp() {
    FooDependency dep = Mockito.mock(FooDependency.class);
    foo = new Foo(dep);
}
</code></pre>

<p>}</p>

<p>```</p>

<p>This is the simplest case.</p>

<ol>
<li>Using <a href="http://docs.mockito.googlecode.com/hg/org/mockito/MockitoAnnotations.html#initMocks(java.lang.Object)">MockitoAnnotations</a>.</li>
</ol>


<p>``` java Initialize mocks with MockitoAnnotations</p>

<p>public void FooTest {</p>

<pre><code>private Foo foo;

@Mock
private FooDependency dep;

@Before
public void setUp() {
    MockitoAnnotations.initMocks(this);
    foo = new Foo(dep);
}
</code></pre>

<p>}</p>

<p>```</p>

<p>This method is useful when you have a lot of mocks to inject.</p>

<ol>
<li>Using <a href="http://docs.mockito.googlecode.com/hg/org/mockito/runners/MockitoJUnitRunner.html">MockitoJUnitRunner</a></li>
</ol>


<p>``` java Initialize mocks with MockitoJUnitRunner</p>

<p>@RunWith(MockitoJUnitRunner.class)
public void FooTest {</p>

<pre><code>private Foo foo;

@Mock
private FooDependency dep;

@Before
public void setUp() {
    foo = new Foo(dep);
}
</code></pre>

<p>}</p>

<p>```</p>

<p>I want to show you another method, by using custom JUnit <code>@Rule</code>.</p>

<p>First, we need to implement <a href="http://junit-team.github.io/junit/javadoc/4.11/org/junit/rules/TestRule.html">TestRule</a> interface which allows to implement custom behaviour during test execution:</p>

<p>``` java MockitoInitializerRule</p>

<p>public class MockitoInitializerRule implements TestRule {</p>

<pre><code>private Object test;

public MockitoInitializerRule(Object test) {
    this.test = test;
}

@Override
public Statement apply(Statement base, Description description) {
    return new MockitInitilizationStatement(base, test);
}
</code></pre>

<p>}</p>

<p>```</p>

<p>We need to pass current test class instance to the rule, so it will be possible inject mocks into class instance. Actual implementation of our rule will go to new class &ndash; subclass of <a href="http://junit-team.github.io/junit/javadoc/4.11/org/junit/runners/model/Statement.html">Statement</a>:</p>

<p>``` java MockitInitilizationStatement</p>

<p>class MockitInitilizationStatement extends Statement {</p>

<pre><code>private final Statement base;
private Object test;

MockitInitilizationStatement(Statement base, Object test) {
    this.base = base;
    this.test = test;
}

@Override
public void evaluate() throws Throwable {
    MockitoAnnotations.initMocks(test);
    base.evaluate();
}
</code></pre>

<p>}</p>

<p>```</p>

<p>What we do is basically initialize mocks in the test class and then proceed with the test method execution.</p>

<p>Now, let&rsquo;s take a look at the usage of newly created Rule:</p>

<p>``` java Example usage of MockitoInitializerRule</p>

<p>public void FooTest {</p>

<pre><code>private Foo foo;

@Mock
private FooDependency dep;

@Rule
public TestRule mockitoInitializerRule = new MockitoInitializerRule(this);

@Before
public void setUp() {
    foo = new Foo(dep);
}
</code></pre>

<p>}</p>

<p>```</p>

<p>Comparing to variant with <code>MockitoJUnitRunner</code> this one provides ability to use custom <a href="http://junit-team.github.io/junit/javadoc/4.11/org/junit/runner/Runner.html">Runner</a>, i.e. we can continue to use <a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.html">SpringJUnit4ClassRunner</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Life Fee]]></title>
    <link href="http://uthark.github.io/blog/2014/03/14/life-fee/"/>
    <updated>2014-03-14T23:42:10-04:00</updated>
    <id>http://uthark.github.io/blog/2014/03/14/life-fee</id>
    <content type="html"><![CDATA[<p>Found in sources:</p>

<p>``` java
try {</p>

<pre><code>// do some business logic.
</code></pre>

<p>} catch (Exception e) {</p>

<pre><code>errorBean.addError("System exception. Unable to locate life fee.");
</code></pre>

<p>}
```</p>

<p>This is just awesome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Limiting Threads Count for GreenRobot EventBus]]></title>
    <link href="http://uthark.github.io/blog/2014/03/06/limiting-threads-count-for-greenrobot-eventbus/"/>
    <updated>2014-03-06T22:38:54-05:00</updated>
    <id>http://uthark.github.io/blog/2014/03/06/limiting-threads-count-for-greenrobot-eventbus</id>
    <content type="html"><![CDATA[<p>In one of my projects I used <a href="https://github.com/greenrobot/EventBus">EventBus</a> library. The library is pretty cool and I would recommend everybody to use it.</p>

<p>But I found one small issue with this library &ndash; in case you send too many events very fast (i.e. more than 1000 per second) you may face issue with application crash due to inability to create new thread.</p>

<p>The problem is lying in the used <code>ExecutorService</code>:</p>

<p>``` java</p>

<p>package de.greenrobot.event;
// imports
public final class EventBus {</p>

<pre><code>static ExecutorService executorService = Executors.newCachedThreadPool();

// class content skipped 
</code></pre>

<p>}</p>

<p>```</p>

<p>As you can see, it calls <code>newCachedThreadPool</code> method to create thread pool.</p>

<p>From <a href="http://developer.android.com/reference/java/util/concurrent/Executors.html#newCachedThreadPool()">javadoc</a> for this method:</p>

<blockquote><p>Creates a thread pool that creates new threads as needed, but will reuse
previously constructed threads when they are available.</p></blockquote>

<p>This is where we hit the wall &ndash; if we send too many requests and each request is slow (i.e. saving into database or network request) then we will try to create too many threads and app will crash.</p>

<p>Thankfully, <code>executorService</code> is <code>static</code> but not <code>final</code>. And this will allow us to solve the issue easily.</p>

<p>Let&rsquo;s create our configurer class in package <code>de.greenrobot.event</code> so we will be able to access <code>executorService</code> property which is package-visible and override it with different thread pool:</p>

<p>``` java EventBusExecutorServiceConfigurer</p>

<p>package de.greenrobot.event;</p>

<p>import java.util.concurrent.Executors;</p>

<p>public class EventBusExecutorServiceConfigurer {</p>

<pre><code>public void configureEventBus() {
    ExecutorService executorServiceToUse;
    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) {
        executorServiceToUse = (ExecutorService) AsyncTask.THREAD_POOL_EXECUTOR;
    } else {
        executorServiceToUse = Executors.newFixedThreadPool(
            Runtime.getRuntime().availableProcessors());
    }
    EventBus.executorService = executorServiceToUse;
}
</code></pre>

<p>}</p>

<p>```</p>

<p>Android 3.0+ has special <a href="http://developer.android.com/reference/android/os/AsyncTask.html#THREAD_POOL_EXECUTOR">THREAD_POOL_EXECUTOR</a> which is supposed to be used by asynchronous tasks, so we use it on newer devices. On older, pre-Honeycomb devices we create our own thread pool.</p>

<p>And then in Android application we configure <code>executorService</code>:</p>

<p>``` java</p>

<p>public class CustomApplication extends Application {</p>

<pre><code>@Override
public void onCreate() {
    super.onCreate();
    new EventBusExecutorServiceConfigurer().configureEventBus();

    // other initialization
}
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
