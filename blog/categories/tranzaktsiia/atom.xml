<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: транзакция | Блог о разработке ПО]]></title>
  <link href="http://uthark.github.com/blog/categories/tranzaktsiia/atom.xml" rel="self"/>
  <link href="http://uthark.github.com/"/>
  <updated>2013-06-29T23:40:55-04:00</updated>
  <id>http://uthark.github.com/</id>
  <author>
    <name><![CDATA[Oleg Atamanenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Вложенные транзакции в базах данных]]></title>
    <link href="http://uthark.github.com/blog/2010/02/04/blog-post/"/>
    <updated>2010-02-04T14:20:00-05:00</updated>
    <id>http://uthark.github.com/blog/2010/02/04/blog-post</id>
    <content type="html"><![CDATA[<div class='post'>
Summary: Некоторые особенности вложенных транзакций.<br />
<br />
Иногда бывает так, что при обработке запроса необходимо открыть ещё одну транзакцию в рамках текущей транзакции. Это называется вложенной транзакцией. <br />
<br />
Очень многие базы данных не поддерживают вложенные транзакции вообще, например, MySQL и Oracle. А те, что поддерживают, делают это на минимальном уровне, например, Sybase поддерживает только псевдовложенные транзакции.<br />
<br />
Вложенные транзакции могут быть следующих видов:<br />
<br />
<ol><li>Псевдо-вложенные транзакции</li>
<li>Вложенная субтранзакция</li>
<li>Вложенная независимая транзакция</li>
</ol><br />
<h3>Псевдовложенные транзакции</h3><br />
Этот тип транзакций поддерживается базой данных Sybase.<br />
Псевдо-вложенные транзакции позволяют использовать транзакции одна внутри другой, при этом не реализуя механизм вложенных транзакций. Суть состоит в том, что имеется счётчик уровня вложенности транзакций, который увеличивается на 1 при каждом вызове <tt>BEGIN TRANSACTION</tt> и уменьшается на 1 при каждом вызове <tt>COMMIT</tt>. Когда счётчик становится равным 0 происходит коммит всех произведённых изменений.<br />
<br />
Если во время проведения транзакции происходит ошибка, то вызывается <tt>ROLLBACK</tt>, но здесь есть загвоздка - что делать с последующими вызовами <tt>BEGIN TRANSACTION</tt>  и <tt>COMMIT</tt>. Оптимальным решением является кидание исключения, но это необходимо отслеживать и учитывать на стадии проектирования и реализации, чтобы не возникло неприятных ситуаций при эксплуатации.<br />
<br />
Псевдовложенные транзакции являются самым простым способом реализации вложенных транзакций.<br />
<br />
Пример псевдотранзакции для базы данных Sybase:<br />
<pre class="brush: sql">begin tran
    select @@trancount
    /* @@trancount = 1 */
    begin tran
        select @@trancount
        /* @@trancount = 2 */
        begin tran
            select @@trancount
            /* @@trancount = 3 */
        commit tran
    commit tran
commit tran
select @@trancount
/* @@ trancount = 0 */
</pre><br />
<h3>Вложенная субтранзакция</h3><br />
Данный вид вложенных транзакций решает проблему с обработкой ошибок при <tt>ROLLBACK</tt>. <br />
При коммите вложенной транзакции происходит коммит, но он не обладает свойством <tt>Durability</tt> - окончательный результат зависит от результата внешней транзакции - если внешняя транзакция заканчивается успешно, то и результат внутренней транзакции также фиксируется. Если же при фиксации изменений внешней транзакции происходит ошибка, то внутренняя транзакция также откатывается. Кроме того, необходимо обратить внимание на то, что если внутренняя транзакция заканчивается неуспешно, то внешняя транзакция может закончиться успешно, если не выкинуть исключение наружу. Таким образом, для данного вида вложенных транзакций необходимо выкидывать исключение наружу, для того, чтобы прервать и откатить внешнюю транзакцию в случае ошибки.<br />
<br />
<h3>Вложенная независимая транзакция</h3>Особенность данного вида вложенных транзакций заключается в том, что после создания вложенной транзакции она является полностью независимой от транзакции, внутри которой она была создана. Её результаты фиксируются и откатываются независимо от внешней транзакции.<br />
<br />
<h3>Вложенные транзакции и принципы ACID</h3>Вложенные транзакции выглядят достаточно подозрительными в том смысле, что они могут нарушать принципы ACID: <br />
1. Вложенная субтранзакция может нарушать принцип <tt>Durability</tt>, так как уже зафиксированные изменения могут откатиться в случае отката внешней транзакции.<br />
2. Вложенная независимая транзакция может нарушать принципы <tt>Atomicity</tt> и <tt>Consistency</tt> при возникновении ошибок во внешней или вложенной транзакции.<br />
<br />
Подробнее о принципах <abbr title="Atomicity, Consistency, Isolation, Durability">ACID</abbr> можно прочитать в <a href="http://atamanenko.blogspot.com/2009/04/blog-post_24.html">этом посте</a>.<br />
<br />
<h3>Заключение</h3>Я считаю, что следует избегать ситуаций, когда нужны вложенные транзакции. Кроме того, спецификация Java EE <a href="http://java.sun.com/javaee/6/docs/api/javax/ejb/TransactionAttributeType.html">не поддерживает</a> вложенные транзакции.</div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>uthark</div>
<div class='content'>
@karri На мой взгляд лучше всё же использовать официальную документацию в таких случаях. :) <a href="http://download.oracle.com/docs/html/B10813_01/toc.htm" rel="nofollow">Oracle® Database Quick Installation Guide 10g Release 1 (10.1) for Linux x86</a><br /><br />И ставить, всё же, лучше на поддерживаемый Ораклом дистрибутив, например на Redhat.</div>
</div>
<div class='comment'>
<div class='author'>karri</div>
<div class='content'>
Вкратце о себе: в прошлом году окончила университет, пол года работаю тестировщиком (тестирую web-приложения и оракловые формсы для биллнговых систем сотовых операторов). Значения SQl начальные: пишу частые несложные запросы для выборки необходимых тестовых данных, заполняю/удаляю/обновляю данные. Иногда запускаю на низком уровне пакетные методы для проверки работоспособности api-методов. Понимаю более сложные запросы (но правда требуется время, чтобы подумать :)). <br /><br />Есть большое желания поставить, даже ни сколько поставить, а сколько грамотно настроить (!) СУБД Oracle под linux. Linux стоит (являюсь пользователем, не администрирую, к своему стыду), осталось Oracle поставить :) <br /><br />Понимаю, что задача для меня сложная, но оч хочется :) При поверхностном поиске наткнулась на статью http://www.interface.ru/home.asp?artId=17461<br />Что вы об этом думаете? С чего бы вы посоветовали мне начать?</div>
</div>
<div class='comment'>
<div class='author'>uthark</div>
<div class='content'>
@karri Извините, я не нарочно. :)<br />С Oracle тоже работаю. Проконсультировать могу попробовать. :)</div>
</div>
<div class='comment'>
<div class='author'>karri</div>
<div class='content'>
А почему karrY?<br /><br />А вы с Oracle работаете ? Проконсультироваться с вами можно?</div>
</div>
<div class='comment'>
<div class='author'>karri</div>
<div class='content'>
This comment has been removed by the author.</div>
</div>
<div class='comment'>
<div class='author'>uthark</div>
<div class='content'>
@karry Да, конечно. Интересно. )</div>
</div>
<div class='comment'>
<div class='author'>karri</div>
<div class='content'>
Ух ты :) Класс! Нравится?</div>
</div>
<div class='comment'>
<div class='author'>uthark</div>
<div class='content'>
@karry Начинал работу Java-разработчиком, сейчас архитектором работаю.</div>
</div>
<div class='comment'>
<div class='author'>karri</div>
<div class='content'>
А вы на java пишете?</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Критерии выбора блокировок]]></title>
    <link href="http://uthark.github.com/blog/2009/04/26/blog-post_26/"/>
    <updated>2009-04-26T04:30:00-04:00</updated>
    <id>http://uthark.github.com/blog/2009/04/26/blog-post_26</id>
    <content type="html"><![CDATA[<div class='post'>
Так как использование блокировок по-разному влияет на производительность, необходимо выбирать, в каких случаях какой вид блокировок лучше использовать.

<style type="text/css">.nobr br { display: none }</style>
<div class="nobr">
<table>

<tbody><tr>
<th>Условие</th>
<th>Пессимистичная</th>
<th>Оптимистичная</th>
<th>Сверх-оптимистичная</th>
</tr>
<tr>
<td>Конфликты часты
</td>
<td>+
</td>
<td>−
</td>
<td>−
</td>
</tr>
<tr>
<td>Конфликты редки
</td>
<td>−
</td>
<td>+
</td>
<td>−
</td>
</tr>
<tr>
<td>Данные только добавляются (например, журнал)
</td>
<td>−
</td>
<td>−
</td>
<td>+
</td>
</tr>
<tr>
<td>Данные только читаются (справочники)</td>
<td>−</td>
<td>−</td>
<td>+</td>
</tr></tbody>
<caption>Критерии выбора блокировок</caption>
</table>
</div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Транзакции в реляционных базах данных]]></title>
    <link href="http://uthark.github.com/blog/2009/04/24/blog-post_24/"/>
    <updated>2009-04-24T10:49:00-04:00</updated>
    <id>http://uthark.github.com/blog/2009/04/24/blog-post_24</id>
    <content type="html"><![CDATA[<div class='post'>
<style type="text/css">.nobr br { display: none }</style>

При работе в многопользовательском окружении может возникнуть ситуация, когда разные пользователи или системы обновляют одни и те же данные. Это может привести к ситуации, когда один из пользователей изменит данные, которые уже изменял другой пользователь и приведёт либо к потере данных, либо к переводу данных в неконсистентное состояние.
Для решения этой проблемы были придуманы транзакции. Целью транзакции является создание абстракции того, что каждый пользователь - единственный в системе.

<h3>Характеристики транзакций</h3>
В конце 1970-х <a href="http://en.wikipedia.org/wiki/Jim_Gray_%28computer_scientist%29">Джим Грей</a> выделил следующие характеристики транзакций:
<ul><li>Атомарность (<span style="font-weight: bold;">A</span>tomicity)
</li><li>Непротиворечивость (<span style="font-weight: bold;">C</span>onsistency)
</li><li>Изолированность (<span style="font-weight: bold;">I</span>solation)
</li><li>Долговечность (<span style="font-weight: bold;">D</span>urability)
</li></ul><span style="font-weight: bold;">Атомарность </span>означает, что все действия, производимые в рамках одной транзакции атомарны. Если транзакция заканчивается не успешно, то все изменения, сделанный в рамках этой транзакции откатываются назад. Если транзакция заканчивается успешно, то все её изменения сохраняются.

<span style="font-weight: bold;">Непротиворечивость </span>означает, что транзакция переводит базу данных из одного непротиворечивого состояния в другое непротиворечивое состояние. При этом, внутри транзакции база данных <span style="font-style: italic;">может</span> находиться в противоречивом состоянии.

<span style="font-weight: bold;">Изолированность</span> означает, что во время работы одной транзакции ей <a href="http://www.blogger.com/post-edit.g?blogID=8483146613266894707&amp;postID=831038356059470359#transaction_isolation_levels">недоступны изменения</a>, происходящие в другой транзакции.

Под <span style="font-weight: bold;">долговечностью</span> подразумевают, что после окончания транзакции все изменения, сделанные транзакцией фиксируется навсегда, то есть, если происходит программно-аппаратный сбой, то после восстановления системы в рабочее состояние нет потерянных изменений.

<a name="transaction_isolation_levels">
<h3>Уровни изоляции транзакций</h3></a>
При параллельном выполнении нескольких транзакций могут возникнуть следующие проблемы:
<ul><li>Потерянное обновление</li><li>"Грязное" чтение</li><li>Неповторяющееся чтение</li><li>Фантомная вставка</li></ul><span style="font-weight: bold;">Потерянное обновление</span> может возникнуть в ситуации, когда две транзакции обновляют одни и те же данные.

<span style="font-weight: bold;">"Грязное" чтение</span> возникает, когда одна транзакция видит несохранённые изменения, сделанные другой транзакцией.

<span style="font-weight: bold;">Неповторяющееся чтение</span> - это ситуация, когда в рамках одной транзакции один и тот же запрос на выборку возвращает разные результаты.

<span style="font-weight: bold;">Фантомная вставка</span> - ситуация, похожая на неповторяющее чтение - заключается в том, что результаты одной и той же выборки в рамках одной транзакции имеют разное количество возвращаемых строк.

<a href="http://www.contrib.andrew.cmu.edu/%7Eshadow/sql/sql1992.txt">Стандарт SQL-92</a> определяет следующие уровни изоляции транзакции:
<ol><li>READ_UNCOMMITED</li><li>READ_COMMITED</li><li>REPEATABLE_READ</li><li>SERIALIZABLE
</li></ol><span style="font-weight: bold;">READ_UNCOMMITED</span> - позволяет другим транзакциям видеть несохранённые изменения

<span style="font-weight: bold;">READ_COMMITED</span> - транзакция во время выполенения видит только зафиксированные изменения. В большинстве баз данных это уровень изоляции по умолчанию.

<span style="font-weight: bold;">REPEATABLE_READ</span> - данный уровень изоляции решает проблему неповторяющего чтения.

<span style="font-weight: bold;">SERIALIZABLE</span> - данный уровень изоляции выполняет все транзакции последовательно. Это самый надёжный уровень изоляции, но, при этом, и наименее производительный.

Каждый уровень решает часть вышеперечисленных проблем.

<div class="nobr">
<table>
<tbody><tr>
<th>Проблема

 Уровень изоляции</th>
<th>Потерянное обновление</th>
<th>Грязное чтение</th>
<th>Неповторяющееся чтение</th>
<th>Фантомная вставка</th>
</tr><tr>
<td>READ_UNCOMMITED</td>
<td>невозможно</td>
<td>возможно</td>
<td>возможно</td>
<td>возможна</td>
</tr><tr>
<td>READ_COMMITED</td>
<td>невозможно</td>
<td>невозможно</td>
<td>возможно</td>
<td>возможна</td>
</tr>
<tr>
<td>REPEATABLE_READ</td>
<td>невозможно</td>
<td>невозможно</td>
<td>невозможно</td>
<td>возможна</td>
</tr>
<tr>
<td>SERIALIZABLE</td>
<td>невозможно</td>
<td>невозможно</td>
<td>невозможно</td>
<td>невозможна</td>
</tr></tbody></table>
</div></div>

]]></content>
  </entry>
  
</feed>
