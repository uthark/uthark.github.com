<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Textview | Software Development and related activities]]></title>
  <link href="http://uthark.github.io/blog/categories/textview/atom.xml" rel="self"/>
  <link href="http://uthark.github.io/"/>
  <updated>2017-10-12T19:01:44-04:00</updated>
  <id>http://uthark.github.io/</id>
  <author>
    <name><![CDATA[Oleg Atamanenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Custom Font in Android TextView]]></title>
    <link href="http://uthark.github.io/blog/2014/03/06/customizing-font-in-android-textview/"/>
    <updated>2014-03-06T19:13:17-05:00</updated>
    <id>http://uthark.github.io/blog/2014/03/06/customizing-font-in-android-textview</id>
    <content type="html"><![CDATA[<p>Today I want to share with you custom <a href="http://developer.android.com/reference/android/widget/TextView.html">TextView</a> which allows to set font to be used in xml layout.</p>

<p>First, we need to declare our custom styleable</p>

<p>``` xml attrs.xml</p>

<p>&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
<resources></p>

<pre><code>&lt;declare-styleable name="TypefaceTextView"&gt;
    &lt;attr name="typeface" format="string"/&gt;
&lt;/declare-styleable&gt;
</code></pre>

<p></resources></p>

<p>```</p>

<p>Then we need to create subclass of <code>TextView</code> which will use custom attribute.</p>

<p>``` java TypefaceTextView</p>

<p>public class TypefaceTextView extends TextView {</p>

<pre><code>public TypefaceTextView(Context context) {
    this(context, null);
}

public TypefaceTextView(Context context, AttributeSet attrs) {
    this(context, attrs, 0);
}

public TypefaceTextView(Context context, AttributeSet attrs, int defStyle) {
    super(context, attrs, defStyle);

    TypedArray ta = context.getTheme().obtainStyledAttributes(attrs, R.styleable.TypefaceTextView, 0, 0);
    try {
        String font = ta.getString(R.styleable.TypefaceTextView_typeface);
        if (null == font) {
            font = context.getString(R.string.default_font_name);
        }
        Typeface typeface = TypefaceCache.getTypeface(context, font);
        if (null != typeface) {
            setTypeface(typeface);
        }

    } finally {
        ta.recycle();
    }
}
</code></pre>

<p>}</p>

<p>```</p>

<p>Also, above class allows to use default custom font, all is needed is to define its name in <code>strings.xml</code></p>

<p>```</p>

<p>&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
<resources></p>

<pre><code>&lt;string name="default_font_name" translatable="false"&gt;custom.ttf&lt;/string&gt;
</code></pre>

<p></resources></p>

<p>```</p>

<p>Due to the <a href="https://code.google.com/p/android/issues/detail?id=9904">bug in Android</a> we have to cache all created typefaces in cache:</p>

<p>``` java TypefaceCache</p>

<p>public class TypefaceCache {</p>

<pre><code>private static final Map&lt;String, Typeface&gt; CACHE = new HashMap&lt;String, Typeface&gt;();

public static Typeface getTypeface(Context context, String font) {
    if (null == font) {
        return null;
    }
    Typeface typeface = CACHE.get(font);
    if (null == typeface) {

        typeface = Typeface.createFromAsset(context.getAssets(), font);
        CACHE.put(font, typeface);
    }
    return typeface;
}
</code></pre>

<p>}</p>

<p>```</p>

<p>Basically, that&rsquo;s it. In order to use it is required to put TTF font in the <code>assets</code> folder and reference the font:</p>

<p>``` xml Example usage.</p>

<p>&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;com.example.android.widget.TypefaceTextView</p>

<pre><code>xmlns:a="http://schemas.android.com/apk/res/android"
xmlns:custom="http://schemas.android.com/apk/res-auto"
a:layout_width="match_parent"
custom:typeface="custom-font.ttf"/&gt;
</code></pre>

<p>```</p>

<p>And the last use case it to set custom font for the actionbar title. In this case we can implement custom <a href="http://developer.android.com/reference/android/text/style/CharacterStyle.html"><code>android.text.style.CharacterStyle</code></a></p>

<p>``` java TypefaceSpan</p>

<p>public class TypefaceSpan extends MetricAffectingSpan {</p>

<pre><code>private Typeface mTypeface;

/**
 * Load the {@link Typeface} and apply to a {@link Spannable}.
 */
public TypefaceSpan(Context context, String typefaceName) {
    mTypeface = TypefaceCache.getTypeface(context, typefaceName);
}

@Override
public void updateMeasureState(TextPaint p) {
    p.setTypeface(mTypeface);

    // Note: This flag is required for proper typeface rendering
    p.setFlags(p.getFlags() | Paint.SUBPIXEL_TEXT_FLAG);
}

@Override
public void updateDrawState(TextPaint tp) {
    tp.setTypeface(mTypeface);

    // Note: This flag is required for proper typeface rendering
    tp.setFlags(tp.getFlags() | Paint.SUBPIXEL_TEXT_FLAG);
}
</code></pre>

<p>}
```</p>

<p>Then we can set actionbar title using the following code:</p>

<p>``` java</p>

<p>public static void setActionBarTitle(Activity context, CharSequence title) {</p>

<pre><code>SpannableString s = new SpannableString(title);
s.setSpan(new TypefaceSpan(context, context.getString(R.string.default_font_name)), 0, s.length(),
    Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);

if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) {
    context.getActionBar().setTitle(s);
}
</code></pre>

<p>}</p>

<p>```</p>

<h3>Additional information</h3>

<ol>
<li><a href="http://developer.android.com/training/custom-views/#create-view.html">Creating a View Class | Android Developers</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
